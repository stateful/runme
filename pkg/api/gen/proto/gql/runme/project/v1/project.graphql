directive @LoadRequestKind on INPUT_FIELD_DEFINITION
directive @ProjectService on FIELD_DEFINITION
input DirectoryProjectOptionsInput {
	"""
	 Path to a directory containing the project.
	
	"""
	path: String
	"""
	 If true, .gitignore file is ignored, as well as .git/info/exclude.
	
	"""
	skipGitignore: Boolean
	"""
	 A list of file patterns, compatible with .gitignore syntax,
	 to ignore.
	
	"""
	ignoreFilePatterns: [String!]
	"""
	 If true, it disables lookuping up for .git folder
	 in the parent directories.
	
	"""
	skipRepoLookupUpward: Boolean
}
input FileProjectOptionsInput {
	path: String
}
type LoadEventError {
	errorMessage: String
}
type LoadEventFinishedParsingDoc {
	path: String
}
type LoadEventFoundDir {
	path: String
}
type LoadEventFoundFile {
	path: String
}
type LoadEventFoundTask {
	documentPath: String
	id: String
	name: String
	isNameGenerated: Boolean
}
type LoadEventStartedParsingDoc {
	path: String
}
enum LoadEventType {
	LOAD_EVENT_TYPE_UNSPECIFIED
	LOAD_EVENT_TYPE_STARTED_WALK
	LOAD_EVENT_TYPE_FOUND_DIR
	LOAD_EVENT_TYPE_FOUND_FILE
	LOAD_EVENT_TYPE_FINISHED_WALK
	LOAD_EVENT_TYPE_STARTED_PARSING_DOC
	LOAD_EVENT_TYPE_FINISHED_PARSING_DOC
	LOAD_EVENT_TYPE_FOUND_TASK
	LOAD_EVENT_TYPE_ERROR
}
input LoadRequestInput {
	directory: DirectoryProjectOptionsInput @LoadRequestKind
	file: FileProjectOptionsInput @LoadRequestKind
	identity: RunmeIdentity
}
type LoadResponse {
	type: LoadEventType
	data: LoadResponseData
}
union LoadResponseData = LoadResponse_StartedWalk | LoadResponse_FoundDir | LoadResponse_FoundFile | LoadResponse_FinishedWalk | LoadResponse_StartedParsingDoc | LoadResponse_FinishedParsingDoc | LoadResponse_FoundTask | LoadResponse_Error
type LoadResponse_Error {
	error: LoadEventError
}
type LoadResponse_FinishedParsingDoc {
	finishedParsingDoc: LoadEventFinishedParsingDoc
}
type LoadResponse_FinishedWalk {
	finishedWalk: LoadEventFinishedWalk
}
type LoadResponse_FoundDir {
	foundDir: LoadEventFoundDir
}
type LoadResponse_FoundFile {
	foundFile: LoadEventFoundFile
}
type LoadResponse_FoundTask {
	foundTask: LoadEventFoundTask
}
type LoadResponse_StartedParsingDoc {
	startedParsingDoc: LoadEventStartedParsingDoc
}
type LoadResponse_StartedWalk {
	startedWalk: LoadEventStartedWalk
}
type Query {
	dummy: Boolean
}
enum RunmeIdentity {
	"""
	 aka NONE
	
	"""
	RUNME_IDENTITY_UNSPECIFIED
	RUNME_IDENTITY_ALL
	RUNME_IDENTITY_DOCUMENT
	RUNME_IDENTITY_CELL
}
type Subscription {
	"""
	 Load creates a new project, walks it, and streams events
	 about found directories, files, and code blocks.
	
	"""
	projectServiceLoad(in: LoadRequestInput): LoadResponse
}
