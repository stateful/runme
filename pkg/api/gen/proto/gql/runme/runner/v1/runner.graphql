"""
 use script for unnormalized cell content
 whereas commands is for normalized shell commands

"""
directive @ResolveProgramRequestSource on INPUT_FIELD_DEFINITION
directive @RunnerService on FIELD_DEFINITION
scalar Bytes
enum CommandMode {
	COMMAND_MODE_UNSPECIFIED
	COMMAND_MODE_INLINE_SHELL
	COMMAND_MODE_TEMP_FILE
	COMMAND_MODE_TERMINAL
	COMMAND_MODE_DAGGER
}
input CreateSessionRequestInput {
	"""
	 metadata is a map of client specific metadata.
	
	"""
	metadata: [CreateSessionRequest_MetadataEntryInput!]
	"""
	 envs field provides an initial set of environment variables
	 for a newly created session.
	
	"""
	envs: [String!]
	"""
	 optional project from which to immediately load environment variables
	
	"""
	project: ProjectInput
	"""
	 optional selection of which env store implementation to sue
	
	"""
	envStoreType: SessionEnvStoreType
}
input CreateSessionRequest_MetadataEntryInput {
	key: String
	value: String
}
type CreateSessionResponse {
	session: Session
}
input DeleteSessionRequestInput {
	id: String
}
input ExecuteRequestInput {
	"""
	 program_name is a name of the program to execute.
	 If it's not a path (relative or absolute), the runner
	 will try to resolve the name.
	 For example: "sh", "/bin/bash".
	
	"""
	programName: String
	"""
	 arguments is a list of arguments passed to the program.
	
	"""
	arguments: [String!]
	"""
	 directory to execute the program in.
	
	"""
	directory: String
	"""
	 envs is a list of additional environment variables
	 that will be injected to the executed program.
	
	"""
	envs: [String!]
	"""
	 commands are commands to be executed by the program.
	 The commands are joined and executed as a script.
	 For example: "echo 'Hello, World'", "ls -l /etc".
	 This is mutually exclusive with the script field.
	
	"""
	commands: [String!]
	"""
	 script is code to be executed by the program.
	 Individual lines are joined with the new line character.
	 This is mutually exclusive with the commands field.
	
	"""
	script: String
	"""
	 tty when true allocates a pseudo-TTY.
	
	"""
	tty: Boolean
	"""
	 input_data is a byte array that will be send as input
	 to the program.
	
	"""
	inputData: Bytes
	"""
	 stop requests the running process to be stopped.
	 It is allowed only in the consecutive calls.
	
	"""
	stop: ExecuteStop
	"""
	 sets pty winsize
	 has no effect in non-interactive mode
	
	"""
	winsize: WinsizeInput
	"""
	 background indicates a background process
	 this will send the process' PID as a first response
	
	"""
	background: Boolean
	"""
	 session_id indicates in which Session the program should execute.
	 Executing in a Session might provide additional context like
	 environment variables.
	
	"""
	sessionId: String
	"""
	 strategy for selecting session
	
	"""
	sessionStrategy: SessionStrategy
	"""
	 project for this runner
	 used to load environment variables from .env files
	
	"""
	project: ProjectInput
	"""
	 whether to store the stdout of the last ran
	 block in the environment variable `__`
	
	"""
	storeLastOutput: Boolean
	commandMode: CommandMode
	"""
	 language id associated with script
	
	"""
	languageId: String
	"""
	 file extension associated with script
	
	"""
	fileExtension: String
	"""
	 optional well known id for cell/block. "know" meaning that
	 CLI/notebook UX have id/name for cells/blocks that contain commands.
	 While the runner doesn't require the name to work, it is useful for
	 auxiliary concerns (e.g. tracing, logging, etc).
	
	"""
	knownId: String
	"""
	 optional well known name for cell/block. "know" meaning that
	 CLI/notebook UX have id/name for cells/blocks that contain commands.
	 While the runner doesn't require the name to work, it is useful for
	 auxiliary concerns (e.g. tracing, logging, etc).
	
	"""
	knownName: String
}
type ExecuteResponse {
	"""
	 exit_code is sent only in the final message.
	
	"""
	exitCode: UInt32Value
	"""
	 stdout_data contains bytes from stdout since the last response.
	
	"""
	stdoutData: Bytes
	"""
	 stderr_data contains bytes from stderr since the last response.
	
	"""
	stderrData: Bytes
	"""
	 pid contains the process' PID
	 this is only sent once in an initial response for background processes.
	
	"""
	pid: ProcessPID
	"""
	 mime_type is a detected MIME type of the stdout_data.
	
	 This is only sent once in the first response containing stdout_data.
	
	"""
	mimeType: String
}
enum ExecuteStop {
	EXECUTE_STOP_UNSPECIFIED
	EXECUTE_STOP_INTERRUPT
	EXECUTE_STOP_KILL
}
input GetSessionRequestInput {
	id: String
}
type GetSessionResponse {
	session: Session
}
type ListSessionsResponse {
	sessions: [Session!]
}
input MonitorEnvStoreRequestInput {
	session: SessionInput
}
type MonitorEnvStoreResponse {
	type: MonitorEnvStoreType
	data: MonitorEnvStoreResponseData
}
union MonitorEnvStoreResponseData = MonitorEnvStoreResponse_Snapshot
type MonitorEnvStoreResponseSnapshot {
	envs: [MonitorEnvStoreResponseSnapshot_SnapshotEnv!]
}
type MonitorEnvStoreResponseSnapshot_Error {
	code: Int
	message: String
}
type MonitorEnvStoreResponseSnapshot_SnapshotEnv {
	status: MonitorEnvStoreResponseSnapshot_Status
	name: String
	spec: String
	origin: String
	originalValue: String
	resolvedValue: String
	createTime: String
	updateTime: String
	errors: [MonitorEnvStoreResponseSnapshot_Error!]
	isRequired: Boolean
	description: String
}
enum MonitorEnvStoreResponseSnapshot_Status {
	STATUS_UNSPECIFIED
	STATUS_LITERAL
	STATUS_HIDDEN
	STATUS_MASKED
}
type MonitorEnvStoreResponse_Snapshot {
	snapshot: MonitorEnvStoreResponseSnapshot
}
enum MonitorEnvStoreType {
	MONITOR_ENV_STORE_TYPE_UNSPECIFIED
	"""
	 possible expansion to have a "timeline" view
	 MONITOR_ENV_STORE_TYPE_TIMELINE = 2;
	
	"""
	MONITOR_ENV_STORE_TYPE_SNAPSHOT
}
type Mutation {
	runnerServiceCreateSession(in: CreateSessionRequestInput): CreateSessionResponse
	runnerServiceGetSession(in: GetSessionRequestInput): GetSessionResponse
	runnerServiceListSessions: ListSessionsResponse
	runnerServiceDeleteSession(in: DeleteSessionRequestInput): Boolean
	"""
	 Execute executes a program. Examine "ExecuteRequest" to explore
	 configuration options.
	
	 It's a bidirectional stream RPC method. It expects the first
	 "ExecuteRequest" to contain details of a program to execute.
	 Subsequent "ExecuteRequest" should only contain "input_data" as
	 other fields will be ignored.
	
	"""
	runnerServiceExecute(in: ExecuteRequestInput): ExecuteResponse
	"""
	 ResolveProgram resolves variables from a script or a list of commands
	 using the provided sources, which can be a list of environment variables,
	 a session, or a project.
	 For now, the resolved variables are only the exported ones using `export`.
	
	"""
	runnerServiceResolveProgram(in: ResolveProgramRequestInput): ResolveProgramResponse
}
type ProcessPID {
	pid: Int
}
input ProjectInput {
	"""
	 project root folder
	
	"""
	root: String
	"""
	 list of environment files to try and load
	 start with
	
	"""
	envLoadOrder: [String!]
	"""
	 specifies if and how direnv should be used
	
	"""
	envDirenv: Project_DirEnv
}
enum Project_DirEnv {
	"""
	 unspecified is the default value
	
	"""
	DIR_ENV_UNSPECIFIED
	"""
	 enabled, only warn on direnv errors
	
	"""
	DIR_ENV_ENABLED_WARN
	"""
	 enabled, error on direnv errors
	
	"""
	DIR_ENV_ENABLED_ERROR
	"""
	 disabled means to not use direnv
	
	"""
	DIR_ENV_DISABLED
}
type Query {
	dummy: Boolean
}
type ResolveProgramCommandList {
	"""
	 commands are commands to be executed by the program.
	 The commands are joined and executed as a script.
	 For example: ["echo 'Hello, World'", "ls -l /etc"].
	
	"""
	lines: [String!]
}
input ResolveProgramCommandListInput {
	"""
	 commands are commands to be executed by the program.
	 The commands are joined and executed as a script.
	 For example: ["echo 'Hello, World'", "ls -l /etc"].
	
	"""
	lines: [String!]
}
input ResolveProgramRequestInput {
	"""
	 commands are commands to be executed by the program.
	 The commands are joined and executed as a script.
	
	"""
	commands: ResolveProgramCommandListInput @ResolveProgramRequestSource
	"""
	 script is code to be executed by the program.
	 Individual lines are joined with the new line character.
	
	"""
	script: String @ResolveProgramRequestSource
	"""
	 mode determines how variables resolution occurs.
	 It is usually based on document or cell annotation config.
	
	"""
	mode: ResolveProgramRequest_Mode
	"""
	 env is a list of explicit environment variables that will be used
	 to resolve the environment variables found in the source.
	
	"""
	env: [String!]
	"""
	 session_id indicates which session is the source of
	 environment variables. If not provided, the most recent
	 session can be used using session_strategy.
	
	"""
	sessionId: String
	"""
	 session_strategy is a strategy for selecting the session.
	
	"""
	sessionStrategy: SessionStrategy
	"""
	 project used to load environment variables from .env files.
	
	"""
	project: ProjectInput
	"""
	 language id associated with script
	
	"""
	languageId: String
	"""
	 retention determines how variables are retained once resolved.
	
	"""
	retention: ResolveProgramRequest_Retention
}
enum ResolveProgramRequest_Mode {
	"""
	 unspecified is auto (default) which prompts for all
	 unresolved environment variables.
	 Subsequent runs will likely resolve via the session.
	
	"""
	MODE_UNSPECIFIED
	"""
	 prompt always means to prompt for all environment variables.
	
	"""
	MODE_PROMPT_ALL
	"""
	 skip means to not prompt for any environment variables.
	 All variables will be marked as resolved.
	
	"""
	MODE_SKIP_ALL
}
enum ResolveProgramRequest_Retention {
	RETENTION_UNSPECIFIED
	"""
	 first run means to always retain the first resolved value.
	
	"""
	RETENTION_FIRST_RUN
	"""
	 last run means to always retain the last resolved value.
	
	"""
	RETENTION_LAST_RUN
}
type ResolveProgramResponse {
	script: String
	"""
	 use script until commands normalization is implemented
	
	"""
	commands: ResolveProgramCommandList
	vars: [ResolveProgramResponse_VarResult!]
}
enum ResolveProgramResponse_Status {
	"""
	 unspecified is the default value and it means unresolved.
	
	"""
	STATUS_UNSPECIFIED
	"""
	 unresolved with message means that the variable is unresolved
	 but it contains a message. E.g. FOO=this is message
	
	"""
	STATUS_UNRESOLVED_WITH_MESSAGE
	"""
	 unresolved with placeholder means that the variable is unresolved
	 but it contains a placeholder. E.g. FOO="this is placeholder"
	
	"""
	STATUS_UNRESOLVED_WITH_PLACEHOLDER
	"""
	 resolved means that the variable is resolved.
	
	"""
	STATUS_RESOLVED
	"""
	 unresolved with secret means that the variable is unresolved
	 and it requires treatment as a secret.
	
	"""
	STATUS_UNRESOLVED_WITH_SECRET
}
type ResolveProgramResponse_VarResult {
	"""
	 prompt indicates the resolution status of the env variable.
	
	"""
	status: ResolveProgramResponse_Status
	"""
	 name is the name of the environment variable.
	
	"""
	name: String
	"""
	 original_value is a default value of the environment variable.
	 It might be a value that is assigned to the variable in the script,
	 like FOO=bar or FOO=${FOO:-bar}.
	 If the variable is not assigned, it is an empty string.
	
	"""
	originalValue: String
	"""
	 resolved_value is a value of the environment variable resolved from a source.
	 If it is an empty string, it means that the environment variable is not resolved.
	
	"""
	resolvedValue: String
}
type Session {
	id: String
	"""
	 envs keeps track of session environment variables.
	 They can be modified by executing programs which
	 alter them through "export" and "unset" commands.
	
	"""
	envs: [String!]
	"""
	 metadata is a map of client specific metadata.
	
	"""
	metadata: [Session_MetadataEntry!]
}
"""
 env store implementation

"""
enum SessionEnvStoreType {
	"""
	 uses default env store
	
	"""
	SESSION_ENV_STORE_TYPE_UNSPECIFIED
	"""
	 uses owl store
	
	"""
	SESSION_ENV_STORE_TYPE_OWL
}
input SessionInput {
	id: String
	"""
	 envs keeps track of session environment variables.
	 They can be modified by executing programs which
	 alter them through "export" and "unset" commands.
	
	"""
	envs: [String!]
	"""
	 metadata is a map of client specific metadata.
	
	"""
	metadata: [Session_MetadataEntryInput!]
}
"""
 strategy for selecting a session in an initial execute request

"""
enum SessionStrategy {
	"""
	 uses session_id field to determine session
	 if none is present, a new session is created
	
	"""
	SESSION_STRATEGY_UNSPECIFIED
	"""
	 uses most recently used session on the grpc server
	 if there is none, a new one is created
	
	"""
	SESSION_STRATEGY_MOST_RECENT
}
type Session_MetadataEntry {
	key: String
	value: String
}
input Session_MetadataEntryInput {
	key: String
	value: String
}
type Subscription {
	runnerServiceMonitorEnvStore(in: MonitorEnvStoreRequestInput): MonitorEnvStoreResponse
	"""
	 Execute executes a program. Examine "ExecuteRequest" to explore
	 configuration options.
	
	 It's a bidirectional stream RPC method. It expects the first
	 "ExecuteRequest" to contain details of a program to execute.
	 Subsequent "ExecuteRequest" should only contain "input_data" as
	 other fields will be ignored.
	
	"""
	runnerServiceExecute(in: ExecuteRequestInput): ExecuteResponse
}
"""
 Wrapper message for `uint32`.

 The JSON representation for `UInt32Value` is JSON number.

"""
type UInt32Value {
	"""
	 The uint32 value.
	
	"""
	value: Int
}
input WinsizeInput {
	"""
	 number of rows (in cells)
	
	"""
	rows: Int
	"""
	 number of columns (in cells)
	
	"""
	cols: Int
	"""
	 width in pixels
	
	"""
	x: Int
	"""
	 height in pixels
	
	"""
	y: Int
}
