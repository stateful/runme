// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: runme/runner/v2/runner.proto

package runnerv2

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RunnerService_CreateSession_FullMethodName   = "/runme.runner.v2.RunnerService/CreateSession"
	RunnerService_GetSession_FullMethodName      = "/runme.runner.v2.RunnerService/GetSession"
	RunnerService_ListSessions_FullMethodName    = "/runme.runner.v2.RunnerService/ListSessions"
	RunnerService_UpdateSession_FullMethodName   = "/runme.runner.v2.RunnerService/UpdateSession"
	RunnerService_DeleteSession_FullMethodName   = "/runme.runner.v2.RunnerService/DeleteSession"
	RunnerService_MonitorEnvStore_FullMethodName = "/runme.runner.v2.RunnerService/MonitorEnvStore"
	RunnerService_Execute_FullMethodName         = "/runme.runner.v2.RunnerService/Execute"
	RunnerService_ExecuteOneShot_FullMethodName  = "/runme.runner.v2.RunnerService/ExecuteOneShot"
	RunnerService_ResolveProgram_FullMethodName  = "/runme.runner.v2.RunnerService/ResolveProgram"
)

// RunnerServiceClient is the client API for RunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerServiceClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error)
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error)
	MonitorEnvStore(ctx context.Context, in *MonitorEnvStoreRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorEnvStoreResponse], error)
	// Execute executes a program. Examine "ExecuteRequest" to explore
	// configuration options.
	//
	// It's a bidirectional stream RPC method. It expects the first
	// "ExecuteRequest" to contain details of a program to execute.
	// Subsequent "ExecuteRequest" should only contain "input_data" as
	// other fields will be ignored.
	Execute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecuteRequest, ExecuteResponse], error)
	// Execute executes a program in OneShot. Examine "ExecuteRequest" to explore
	// configuration options.
	//
	// Client sends a single message containing the program to execute. Server
	// streams back the output of the program.
	ExecuteOneShot(ctx context.Context, in *ExecuteOneShotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteOneShotResponse], error)
	// ResolveProgram resolves variables from a script or a list of commands
	// using the provided sources, which can be a list of environment variables,
	// a session, or a project.
	// For now, the resolved variables are only the exported ones using `export`.
	ResolveProgram(ctx context.Context, in *ResolveProgramRequest, opts ...grpc.CallOption) (*ResolveProgramResponse, error)
}

type runnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerServiceClient(cc grpc.ClientConnInterface) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, RunnerService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, RunnerService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, RunnerService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*UpdateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSessionResponse)
	err := c.cc.Invoke(ctx, RunnerService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*DeleteSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSessionResponse)
	err := c.cc.Invoke(ctx, RunnerService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerServiceClient) MonitorEnvStore(ctx context.Context, in *MonitorEnvStoreRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MonitorEnvStoreResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RunnerService_ServiceDesc.Streams[0], RunnerService_MonitorEnvStore_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MonitorEnvStoreRequest, MonitorEnvStoreResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_MonitorEnvStoreClient = grpc.ServerStreamingClient[MonitorEnvStoreResponse]

func (c *runnerServiceClient) Execute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecuteRequest, ExecuteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RunnerService_ServiceDesc.Streams[1], RunnerService_Execute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecuteRequest, ExecuteResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_ExecuteClient = grpc.BidiStreamingClient[ExecuteRequest, ExecuteResponse]

func (c *runnerServiceClient) ExecuteOneShot(ctx context.Context, in *ExecuteOneShotRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteOneShotResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RunnerService_ServiceDesc.Streams[2], RunnerService_ExecuteOneShot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecuteOneShotRequest, ExecuteOneShotResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_ExecuteOneShotClient = grpc.ServerStreamingClient[ExecuteOneShotResponse]

func (c *runnerServiceClient) ResolveProgram(ctx context.Context, in *ResolveProgramRequest, opts ...grpc.CallOption) (*ResolveProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveProgramResponse)
	err := c.cc.Invoke(ctx, RunnerService_ResolveProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServiceServer is the server API for RunnerService service.
// All implementations must embed UnimplementedRunnerServiceServer
// for forward compatibility.
type RunnerServiceServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error)
	DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error)
	MonitorEnvStore(*MonitorEnvStoreRequest, grpc.ServerStreamingServer[MonitorEnvStoreResponse]) error
	// Execute executes a program. Examine "ExecuteRequest" to explore
	// configuration options.
	//
	// It's a bidirectional stream RPC method. It expects the first
	// "ExecuteRequest" to contain details of a program to execute.
	// Subsequent "ExecuteRequest" should only contain "input_data" as
	// other fields will be ignored.
	Execute(grpc.BidiStreamingServer[ExecuteRequest, ExecuteResponse]) error
	// Execute executes a program in OneShot. Examine "ExecuteRequest" to explore
	// configuration options.
	//
	// Client sends a single message containing the program to execute. Server
	// streams back the output of the program.
	ExecuteOneShot(*ExecuteOneShotRequest, grpc.ServerStreamingServer[ExecuteOneShotResponse]) error
	// ResolveProgram resolves variables from a script or a list of commands
	// using the provided sources, which can be a list of environment variables,
	// a session, or a project.
	// For now, the resolved variables are only the exported ones using `export`.
	ResolveProgram(context.Context, *ResolveProgramRequest) (*ResolveProgramResponse, error)
	mustEmbedUnimplementedRunnerServiceServer()
}

// UnimplementedRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerServiceServer struct{}

func (UnimplementedRunnerServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedRunnerServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedRunnerServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedRunnerServiceServer) UpdateSession(context.Context, *UpdateSessionRequest) (*UpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedRunnerServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*DeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedRunnerServiceServer) MonitorEnvStore(*MonitorEnvStoreRequest, grpc.ServerStreamingServer[MonitorEnvStoreResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorEnvStore not implemented")
}
func (UnimplementedRunnerServiceServer) Execute(grpc.BidiStreamingServer[ExecuteRequest, ExecuteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedRunnerServiceServer) ExecuteOneShot(*ExecuteOneShotRequest, grpc.ServerStreamingServer[ExecuteOneShotResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteOneShot not implemented")
}
func (UnimplementedRunnerServiceServer) ResolveProgram(context.Context, *ResolveProgramRequest) (*ResolveProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveProgram not implemented")
}
func (UnimplementedRunnerServiceServer) mustEmbedUnimplementedRunnerServiceServer() {}
func (UnimplementedRunnerServiceServer) testEmbeddedByValue()                       {}

// UnsafeRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServiceServer will
// result in compilation errors.
type UnsafeRunnerServiceServer interface {
	mustEmbedUnimplementedRunnerServiceServer()
}

func RegisterRunnerServiceServer(s grpc.ServiceRegistrar, srv RunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RunnerService_ServiceDesc, srv)
}

func _RunnerService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerService_MonitorEnvStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorEnvStoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServiceServer).MonitorEnvStore(m, &grpc.GenericServerStream[MonitorEnvStoreRequest, MonitorEnvStoreResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_MonitorEnvStoreServer = grpc.ServerStreamingServer[MonitorEnvStoreResponse]

func _RunnerService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerServiceServer).Execute(&grpc.GenericServerStream[ExecuteRequest, ExecuteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_ExecuteServer = grpc.BidiStreamingServer[ExecuteRequest, ExecuteResponse]

func _RunnerService_ExecuteOneShot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteOneShotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServiceServer).ExecuteOneShot(m, &grpc.GenericServerStream[ExecuteOneShotRequest, ExecuteOneShotResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RunnerService_ExecuteOneShotServer = grpc.ServerStreamingServer[ExecuteOneShotResponse]

func _RunnerService_ResolveProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).ResolveProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerService_ResolveProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).ResolveProgram(ctx, req.(*ResolveProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerService_ServiceDesc is the grpc.ServiceDesc for RunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runme.runner.v2.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _RunnerService_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _RunnerService_GetSession_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _RunnerService_ListSessions_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _RunnerService_UpdateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _RunnerService_DeleteSession_Handler,
		},
		{
			MethodName: "ResolveProgram",
			Handler:    _RunnerService_ResolveProgram_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorEnvStore",
			Handler:       _RunnerService_MonitorEnvStore_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Execute",
			Handler:       _RunnerService_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecuteOneShot",
			Handler:       _RunnerService_ExecuteOneShot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runme/runner/v2/runner.proto",
}
