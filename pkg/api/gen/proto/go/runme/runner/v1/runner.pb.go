// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: runme/runner/v1/runner.proto

package runnerv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// env store implementation
type SessionEnvStoreType int32

const (
	// uses default env store
	SessionEnvStoreType_SESSION_ENV_STORE_TYPE_UNSPECIFIED SessionEnvStoreType = 0
	// uses owl store
	SessionEnvStoreType_SESSION_ENV_STORE_TYPE_OWL SessionEnvStoreType = 1
)

// Enum value maps for SessionEnvStoreType.
var (
	SessionEnvStoreType_name = map[int32]string{
		0: "SESSION_ENV_STORE_TYPE_UNSPECIFIED",
		1: "SESSION_ENV_STORE_TYPE_OWL",
	}
	SessionEnvStoreType_value = map[string]int32{
		"SESSION_ENV_STORE_TYPE_UNSPECIFIED": 0,
		"SESSION_ENV_STORE_TYPE_OWL":         1,
	}
)

func (x SessionEnvStoreType) Enum() *SessionEnvStoreType {
	p := new(SessionEnvStoreType)
	*p = x
	return p
}

func (x SessionEnvStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionEnvStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[0].Descriptor()
}

func (SessionEnvStoreType) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[0]
}

func (x SessionEnvStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionEnvStoreType.Descriptor instead.
func (SessionEnvStoreType) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{0}
}

type ExecuteStop int32

const (
	ExecuteStop_EXECUTE_STOP_UNSPECIFIED ExecuteStop = 0
	ExecuteStop_EXECUTE_STOP_INTERRUPT   ExecuteStop = 1
	ExecuteStop_EXECUTE_STOP_KILL        ExecuteStop = 2
)

// Enum value maps for ExecuteStop.
var (
	ExecuteStop_name = map[int32]string{
		0: "EXECUTE_STOP_UNSPECIFIED",
		1: "EXECUTE_STOP_INTERRUPT",
		2: "EXECUTE_STOP_KILL",
	}
	ExecuteStop_value = map[string]int32{
		"EXECUTE_STOP_UNSPECIFIED": 0,
		"EXECUTE_STOP_INTERRUPT":   1,
		"EXECUTE_STOP_KILL":        2,
	}
)

func (x ExecuteStop) Enum() *ExecuteStop {
	p := new(ExecuteStop)
	*p = x
	return p
}

func (x ExecuteStop) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteStop) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[1].Descriptor()
}

func (ExecuteStop) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[1]
}

func (x ExecuteStop) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteStop.Descriptor instead.
func (ExecuteStop) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{1}
}

type CommandMode int32

const (
	CommandMode_COMMAND_MODE_UNSPECIFIED  CommandMode = 0
	CommandMode_COMMAND_MODE_INLINE_SHELL CommandMode = 1
	CommandMode_COMMAND_MODE_TEMP_FILE    CommandMode = 2
	CommandMode_COMMAND_MODE_TERMINAL     CommandMode = 3
	CommandMode_COMMAND_MODE_DAGGER       CommandMode = 4
)

// Enum value maps for CommandMode.
var (
	CommandMode_name = map[int32]string{
		0: "COMMAND_MODE_UNSPECIFIED",
		1: "COMMAND_MODE_INLINE_SHELL",
		2: "COMMAND_MODE_TEMP_FILE",
		3: "COMMAND_MODE_TERMINAL",
		4: "COMMAND_MODE_DAGGER",
	}
	CommandMode_value = map[string]int32{
		"COMMAND_MODE_UNSPECIFIED":  0,
		"COMMAND_MODE_INLINE_SHELL": 1,
		"COMMAND_MODE_TEMP_FILE":    2,
		"COMMAND_MODE_TERMINAL":     3,
		"COMMAND_MODE_DAGGER":       4,
	}
)

func (x CommandMode) Enum() *CommandMode {
	p := new(CommandMode)
	*p = x
	return p
}

func (x CommandMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandMode) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[2].Descriptor()
}

func (CommandMode) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[2]
}

func (x CommandMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandMode.Descriptor instead.
func (CommandMode) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{2}
}

// strategy for selecting a session in an initial execute request
type SessionStrategy int32

const (
	// uses session_id field to determine session
	// if none is present, a new session is created
	SessionStrategy_SESSION_STRATEGY_UNSPECIFIED SessionStrategy = 0
	// uses most recently used session on the grpc server
	// if there is none, a new one is created
	SessionStrategy_SESSION_STRATEGY_MOST_RECENT SessionStrategy = 1
)

// Enum value maps for SessionStrategy.
var (
	SessionStrategy_name = map[int32]string{
		0: "SESSION_STRATEGY_UNSPECIFIED",
		1: "SESSION_STRATEGY_MOST_RECENT",
	}
	SessionStrategy_value = map[string]int32{
		"SESSION_STRATEGY_UNSPECIFIED": 0,
		"SESSION_STRATEGY_MOST_RECENT": 1,
	}
)

func (x SessionStrategy) Enum() *SessionStrategy {
	p := new(SessionStrategy)
	*p = x
	return p
}

func (x SessionStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[3].Descriptor()
}

func (SessionStrategy) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[3]
}

func (x SessionStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStrategy.Descriptor instead.
func (SessionStrategy) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{3}
}

type MonitorEnvStoreType int32

const (
	MonitorEnvStoreType_MONITOR_ENV_STORE_TYPE_UNSPECIFIED MonitorEnvStoreType = 0
	MonitorEnvStoreType_MONITOR_ENV_STORE_TYPE_SNAPSHOT    MonitorEnvStoreType = 1
)

// Enum value maps for MonitorEnvStoreType.
var (
	MonitorEnvStoreType_name = map[int32]string{
		0: "MONITOR_ENV_STORE_TYPE_UNSPECIFIED",
		1: "MONITOR_ENV_STORE_TYPE_SNAPSHOT",
	}
	MonitorEnvStoreType_value = map[string]int32{
		"MONITOR_ENV_STORE_TYPE_UNSPECIFIED": 0,
		"MONITOR_ENV_STORE_TYPE_SNAPSHOT":    1,
	}
)

func (x MonitorEnvStoreType) Enum() *MonitorEnvStoreType {
	p := new(MonitorEnvStoreType)
	*p = x
	return p
}

func (x MonitorEnvStoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorEnvStoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[4].Descriptor()
}

func (MonitorEnvStoreType) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[4]
}

func (x MonitorEnvStoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorEnvStoreType.Descriptor instead.
func (MonitorEnvStoreType) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{4}
}

type Project_DirEnv int32

const (
	// unspecified is the default value
	Project_DIR_ENV_UNSPECIFIED Project_DirEnv = 0
	// enabled, only warn on direnv errors
	Project_DIR_ENV_ENABLED_WARN Project_DirEnv = 1
	// enabled, error on direnv errors
	Project_DIR_ENV_ENABLED_ERROR Project_DirEnv = 2
	// disabled means to not use direnv
	Project_DIR_ENV_DISABLED Project_DirEnv = 3
)

// Enum value maps for Project_DirEnv.
var (
	Project_DirEnv_name = map[int32]string{
		0: "DIR_ENV_UNSPECIFIED",
		1: "DIR_ENV_ENABLED_WARN",
		2: "DIR_ENV_ENABLED_ERROR",
		3: "DIR_ENV_DISABLED",
	}
	Project_DirEnv_value = map[string]int32{
		"DIR_ENV_UNSPECIFIED":   0,
		"DIR_ENV_ENABLED_WARN":  1,
		"DIR_ENV_ENABLED_ERROR": 2,
		"DIR_ENV_DISABLED":      3,
	}
)

func (x Project_DirEnv) Enum() *Project_DirEnv {
	p := new(Project_DirEnv)
	*p = x
	return p
}

func (x Project_DirEnv) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Project_DirEnv) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[5].Descriptor()
}

func (Project_DirEnv) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[5]
}

func (x Project_DirEnv) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Project_DirEnv.Descriptor instead.
func (Project_DirEnv) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{9, 0}
}

type ResolveProgramRequest_Mode int32

const (
	// unspecified is auto (default) which prompts for all
	// unresolved environment variables.
	// Subsequent runs will likely resolve via the session.
	ResolveProgramRequest_MODE_UNSPECIFIED ResolveProgramRequest_Mode = 0
	// prompt always means to prompt for all environment variables.
	ResolveProgramRequest_MODE_PROMPT_ALL ResolveProgramRequest_Mode = 1
	// skip means to not prompt for any environment variables.
	// All variables will be marked as resolved.
	ResolveProgramRequest_MODE_SKIP_ALL ResolveProgramRequest_Mode = 2
)

// Enum value maps for ResolveProgramRequest_Mode.
var (
	ResolveProgramRequest_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_PROMPT_ALL",
		2: "MODE_SKIP_ALL",
	}
	ResolveProgramRequest_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_PROMPT_ALL":  1,
		"MODE_SKIP_ALL":    2,
	}
)

func (x ResolveProgramRequest_Mode) Enum() *ResolveProgramRequest_Mode {
	p := new(ResolveProgramRequest_Mode)
	*p = x
	return p
}

func (x ResolveProgramRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveProgramRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[6].Descriptor()
}

func (ResolveProgramRequest_Mode) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[6]
}

func (x ResolveProgramRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveProgramRequest_Mode.Descriptor instead.
func (ResolveProgramRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{15, 0}
}

type ResolveProgramRequest_Retention int32

const (
	ResolveProgramRequest_RETENTION_UNSPECIFIED ResolveProgramRequest_Retention = 0
	// first run means to always retain the first resolved value.
	ResolveProgramRequest_RETENTION_FIRST_RUN ResolveProgramRequest_Retention = 1
	// last run means to always retain the last resolved value.
	ResolveProgramRequest_RETENTION_LAST_RUN ResolveProgramRequest_Retention = 2
)

// Enum value maps for ResolveProgramRequest_Retention.
var (
	ResolveProgramRequest_Retention_name = map[int32]string{
		0: "RETENTION_UNSPECIFIED",
		1: "RETENTION_FIRST_RUN",
		2: "RETENTION_LAST_RUN",
	}
	ResolveProgramRequest_Retention_value = map[string]int32{
		"RETENTION_UNSPECIFIED": 0,
		"RETENTION_FIRST_RUN":   1,
		"RETENTION_LAST_RUN":    2,
	}
)

func (x ResolveProgramRequest_Retention) Enum() *ResolveProgramRequest_Retention {
	p := new(ResolveProgramRequest_Retention)
	*p = x
	return p
}

func (x ResolveProgramRequest_Retention) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveProgramRequest_Retention) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[7].Descriptor()
}

func (ResolveProgramRequest_Retention) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[7]
}

func (x ResolveProgramRequest_Retention) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveProgramRequest_Retention.Descriptor instead.
func (ResolveProgramRequest_Retention) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{15, 1}
}

type ResolveProgramResponse_Status int32

const (
	// unspecified is the default value and it means unresolved.
	ResolveProgramResponse_STATUS_UNSPECIFIED ResolveProgramResponse_Status = 0
	// unresolved with message means that the variable is unresolved
	// but it contains a message. E.g. FOO=this is message
	ResolveProgramResponse_STATUS_UNRESOLVED_WITH_MESSAGE ResolveProgramResponse_Status = 1
	// unresolved with placeholder means that the variable is unresolved
	// but it contains a placeholder. E.g. FOO="this is placeholder"
	ResolveProgramResponse_STATUS_UNRESOLVED_WITH_PLACEHOLDER ResolveProgramResponse_Status = 2
	// resolved means that the variable is resolved.
	ResolveProgramResponse_STATUS_RESOLVED ResolveProgramResponse_Status = 3
	// unresolved with secret means that the variable is unresolved
	// and it requires treatment as a secret.
	ResolveProgramResponse_STATUS_UNRESOLVED_WITH_SECRET ResolveProgramResponse_Status = 4
)

// Enum value maps for ResolveProgramResponse_Status.
var (
	ResolveProgramResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_UNRESOLVED_WITH_MESSAGE",
		2: "STATUS_UNRESOLVED_WITH_PLACEHOLDER",
		3: "STATUS_RESOLVED",
		4: "STATUS_UNRESOLVED_WITH_SECRET",
	}
	ResolveProgramResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                 0,
		"STATUS_UNRESOLVED_WITH_MESSAGE":     1,
		"STATUS_UNRESOLVED_WITH_PLACEHOLDER": 2,
		"STATUS_RESOLVED":                    3,
		"STATUS_UNRESOLVED_WITH_SECRET":      4,
	}
)

func (x ResolveProgramResponse_Status) Enum() *ResolveProgramResponse_Status {
	p := new(ResolveProgramResponse_Status)
	*p = x
	return p
}

func (x ResolveProgramResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolveProgramResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[8].Descriptor()
}

func (ResolveProgramResponse_Status) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[8]
}

func (x ResolveProgramResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResolveProgramResponse_Status.Descriptor instead.
func (ResolveProgramResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{16, 0}
}

type MonitorEnvStoreResponseSnapshot_Status int32

const (
	MonitorEnvStoreResponseSnapshot_STATUS_UNSPECIFIED MonitorEnvStoreResponseSnapshot_Status = 0
	MonitorEnvStoreResponseSnapshot_STATUS_LITERAL     MonitorEnvStoreResponseSnapshot_Status = 1
	MonitorEnvStoreResponseSnapshot_STATUS_HIDDEN      MonitorEnvStoreResponseSnapshot_Status = 2
	MonitorEnvStoreResponseSnapshot_STATUS_MASKED      MonitorEnvStoreResponseSnapshot_Status = 3
)

// Enum value maps for MonitorEnvStoreResponseSnapshot_Status.
var (
	MonitorEnvStoreResponseSnapshot_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_LITERAL",
		2: "STATUS_HIDDEN",
		3: "STATUS_MASKED",
	}
	MonitorEnvStoreResponseSnapshot_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_LITERAL":     1,
		"STATUS_HIDDEN":      2,
		"STATUS_MASKED":      3,
	}
)

func (x MonitorEnvStoreResponseSnapshot_Status) Enum() *MonitorEnvStoreResponseSnapshot_Status {
	p := new(MonitorEnvStoreResponseSnapshot_Status)
	*p = x
	return p
}

func (x MonitorEnvStoreResponseSnapshot_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorEnvStoreResponseSnapshot_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_runner_v1_runner_proto_enumTypes[9].Descriptor()
}

func (MonitorEnvStoreResponseSnapshot_Status) Type() protoreflect.EnumType {
	return &file_runme_runner_v1_runner_proto_enumTypes[9]
}

func (x MonitorEnvStoreResponseSnapshot_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot_Status.Descriptor instead.
func (MonitorEnvStoreResponseSnapshot_Status) EnumDescriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{18, 0}
}

type Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// envs keeps track of session environment variables.
	// They can be modified by executing programs which
	// alter them through "export" and "unset" commands.
	Envs []string `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty"`
	// metadata is a map of client specific metadata.
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *Session) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// metadata is a map of client specific metadata.
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// envs field provides an initial set of environment variables
	// for a newly created session.
	Envs []string `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty"`
	// optional project from which to immediately load environment variables
	Project *Project `protobuf:"bytes,3,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// optional selection of which env store implementation to sue
	EnvStoreType  SessionEnvStoreType `protobuf:"varint,4,opt,name=env_store_type,json=envStoreType,proto3,enum=runme.runner.v1.SessionEnvStoreType" json:"env_store_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateSessionRequest) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *CreateSessionRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *CreateSessionRequest) GetEnvStoreType() SessionEnvStoreType {
	if x != nil {
		return x.EnvStoreType
	}
	return SessionEnvStoreType_SESSION_ENV_STORE_TYPE_UNSPECIFIED
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type GetSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{3}
}

func (x *GetSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{4}
}

func (x *GetSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type ListSessionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{5}
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*Session             `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{6}
}

func (x *ListSessionsResponse) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type DeleteSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSessionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{8}
}

type Project struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// project root folder
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// list of environment files to try and load
	// start with
	EnvLoadOrder []string `protobuf:"bytes,2,rep,name=env_load_order,json=envLoadOrder,proto3" json:"env_load_order,omitempty"`
	// specifies if and how direnv should be used
	EnvDirenv     Project_DirEnv `protobuf:"varint,3,opt,name=env_direnv,json=envDirenv,proto3,enum=runme.runner.v1.Project_DirEnv" json:"env_direnv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{9}
}

func (x *Project) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Project) GetEnvLoadOrder() []string {
	if x != nil {
		return x.EnvLoadOrder
	}
	return nil
}

func (x *Project) GetEnvDirenv() Project_DirEnv {
	if x != nil {
		return x.EnvDirenv
	}
	return Project_DIR_ENV_UNSPECIFIED
}

type Winsize struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// number of rows (in cells)
	Rows uint32 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	// number of columns (in cells)
	Cols uint32 `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	// width in pixels
	X uint32 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	// height in pixels
	Y             uint32 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Winsize) Reset() {
	*x = Winsize{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Winsize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Winsize) ProtoMessage() {}

func (x *Winsize) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Winsize.ProtoReflect.Descriptor instead.
func (*Winsize) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{10}
}

func (x *Winsize) GetRows() uint32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Winsize) GetCols() uint32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *Winsize) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Winsize) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ExecuteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// program_name is a name of the program to execute.
	// If it's not a path (relative or absolute), the runner
	// will try to resolve the name.
	// For example: "sh", "/bin/bash".
	ProgramName string `protobuf:"bytes,1,opt,name=program_name,json=programName,proto3" json:"program_name,omitempty"`
	// arguments is a list of arguments passed to the program.
	Arguments []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	// directory to execute the program in.
	Directory string `protobuf:"bytes,3,opt,name=directory,proto3" json:"directory,omitempty"`
	// envs is a list of additional environment variables
	// that will be injected to the executed program.
	Envs []string `protobuf:"bytes,4,rep,name=envs,proto3" json:"envs,omitempty"`
	// commands are commands to be executed by the program.
	// The commands are joined and executed as a script.
	// For example: "echo 'Hello, World'", "ls -l /etc".
	// This is mutually exclusive with the script field.
	Commands []string `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
	// script is code to be executed by the program.
	// Individual lines are joined with the new line character.
	// This is mutually exclusive with the commands field.
	Script string `protobuf:"bytes,6,opt,name=script,proto3" json:"script,omitempty"`
	// tty when true allocates a pseudo-TTY.
	Tty bool `protobuf:"varint,7,opt,name=tty,proto3" json:"tty,omitempty"`
	// input_data is a byte array that will be send as input
	// to the program.
	InputData []byte `protobuf:"bytes,8,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// stop requests the running process to be stopped.
	// It is allowed only in the consecutive calls.
	Stop ExecuteStop `protobuf:"varint,9,opt,name=stop,proto3,enum=runme.runner.v1.ExecuteStop" json:"stop,omitempty"`
	// sets pty winsize
	// has no effect in non-interactive mode
	Winsize *Winsize `protobuf:"bytes,10,opt,name=winsize,proto3,oneof" json:"winsize,omitempty"`
	// background indicates a background process
	// this will send the process' PID as a first response
	Background bool `protobuf:"varint,11,opt,name=background,proto3" json:"background,omitempty"`
	// session_id indicates in which Session the program should execute.
	// Executing in a Session might provide additional context like
	// environment variables.
	SessionId string `protobuf:"bytes,20,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// strategy for selecting session
	SessionStrategy SessionStrategy `protobuf:"varint,21,opt,name=session_strategy,json=sessionStrategy,proto3,enum=runme.runner.v1.SessionStrategy" json:"session_strategy,omitempty"`
	// project for this runner
	// used to load environment variables from .env files
	Project *Project `protobuf:"bytes,22,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// whether to store the stdout of the last ran
	// block in the environment variable `__`
	StoreLastOutput bool        `protobuf:"varint,23,opt,name=store_last_output,json=storeLastOutput,proto3" json:"store_last_output,omitempty"`
	CommandMode     CommandMode `protobuf:"varint,24,opt,name=command_mode,json=commandMode,proto3,enum=runme.runner.v1.CommandMode" json:"command_mode,omitempty"`
	// language id associated with script
	LanguageId string `protobuf:"bytes,25,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	// file extension associated with script
	FileExtension string `protobuf:"bytes,26,opt,name=file_extension,json=fileExtension,proto3" json:"file_extension,omitempty"`
	// optional well known id for cell/block. "know" meaning that
	// CLI/notebook UX have id/name for cells/blocks that contain commands.
	// While the runner doesn't require the name to work, it is useful for
	// auxiliary concerns (e.g. tracing, logging, etc).
	KnownId string `protobuf:"bytes,27,opt,name=known_id,json=knownId,proto3" json:"known_id,omitempty"`
	// optional well known name for cell/block. "know" meaning that
	// CLI/notebook UX have id/name for cells/blocks that contain commands.
	// While the runner doesn't require the name to work, it is useful for
	// auxiliary concerns (e.g. tracing, logging, etc).
	KnownName     string `protobuf:"bytes,28,opt,name=known_name,json=knownName,proto3" json:"known_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{11}
}

func (x *ExecuteRequest) GetProgramName() string {
	if x != nil {
		return x.ProgramName
	}
	return ""
}

func (x *ExecuteRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ExecuteRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ExecuteRequest) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *ExecuteRequest) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ExecuteRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ExecuteRequest) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *ExecuteRequest) GetInputData() []byte {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *ExecuteRequest) GetStop() ExecuteStop {
	if x != nil {
		return x.Stop
	}
	return ExecuteStop_EXECUTE_STOP_UNSPECIFIED
}

func (x *ExecuteRequest) GetWinsize() *Winsize {
	if x != nil {
		return x.Winsize
	}
	return nil
}

func (x *ExecuteRequest) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *ExecuteRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExecuteRequest) GetSessionStrategy() SessionStrategy {
	if x != nil {
		return x.SessionStrategy
	}
	return SessionStrategy_SESSION_STRATEGY_UNSPECIFIED
}

func (x *ExecuteRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *ExecuteRequest) GetStoreLastOutput() bool {
	if x != nil {
		return x.StoreLastOutput
	}
	return false
}

func (x *ExecuteRequest) GetCommandMode() CommandMode {
	if x != nil {
		return x.CommandMode
	}
	return CommandMode_COMMAND_MODE_UNSPECIFIED
}

func (x *ExecuteRequest) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *ExecuteRequest) GetFileExtension() string {
	if x != nil {
		return x.FileExtension
	}
	return ""
}

func (x *ExecuteRequest) GetKnownId() string {
	if x != nil {
		return x.KnownId
	}
	return ""
}

func (x *ExecuteRequest) GetKnownName() string {
	if x != nil {
		return x.KnownName
	}
	return ""
}

type ProcessPID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           int64                  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessPID) Reset() {
	*x = ProcessPID{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessPID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessPID) ProtoMessage() {}

func (x *ProcessPID) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessPID.ProtoReflect.Descriptor instead.
func (*ProcessPID) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessPID) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type ExecuteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// exit_code is sent only in the final message.
	ExitCode *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// stdout_data contains bytes from stdout since the last response.
	StdoutData []byte `protobuf:"bytes,2,opt,name=stdout_data,json=stdoutData,proto3" json:"stdout_data,omitempty"`
	// stderr_data contains bytes from stderr since the last response.
	StderrData []byte `protobuf:"bytes,3,opt,name=stderr_data,json=stderrData,proto3" json:"stderr_data,omitempty"`
	// pid contains the process' PID
	// this is only sent once in an initial response for background processes.
	Pid *ProcessPID `protobuf:"bytes,4,opt,name=pid,proto3" json:"pid,omitempty"`
	// mime_type is a detected MIME type of the stdout_data.
	//
	// This is only sent once in the first response containing stdout_data.
	MimeType      string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{13}
}

func (x *ExecuteResponse) GetExitCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExitCode
	}
	return nil
}

func (x *ExecuteResponse) GetStdoutData() []byte {
	if x != nil {
		return x.StdoutData
	}
	return nil
}

func (x *ExecuteResponse) GetStderrData() []byte {
	if x != nil {
		return x.StderrData
	}
	return nil
}

func (x *ExecuteResponse) GetPid() *ProcessPID {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *ExecuteResponse) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type ResolveProgramCommandList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// commands are commands to be executed by the program.
	// The commands are joined and executed as a script.
	// For example: ["echo 'Hello, World'", "ls -l /etc"].
	Lines         []string `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramCommandList) Reset() {
	*x = ResolveProgramCommandList{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramCommandList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramCommandList) ProtoMessage() {}

func (x *ResolveProgramCommandList) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramCommandList.ProtoReflect.Descriptor instead.
func (*ResolveProgramCommandList) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{14}
}

func (x *ResolveProgramCommandList) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type ResolveProgramRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// use script for unnormalized cell content
	// whereas commands is for normalized shell commands
	//
	// Types that are valid to be assigned to Source:
	//
	//	*ResolveProgramRequest_Commands
	//	*ResolveProgramRequest_Script
	Source isResolveProgramRequest_Source `protobuf_oneof:"source"`
	// mode determines how variables resolution occurs.
	// It is usually based on document or cell annotation config.
	Mode ResolveProgramRequest_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=runme.runner.v1.ResolveProgramRequest_Mode" json:"mode,omitempty"`
	// env is a list of explicit environment variables that will be used
	// to resolve the environment variables found in the source.
	Env []string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`
	// session_id indicates which session is the source of
	// environment variables. If not provided, the most recent
	// session can be used using session_strategy.
	SessionId string `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// session_strategy is a strategy for selecting the session.
	SessionStrategy SessionStrategy `protobuf:"varint,6,opt,name=session_strategy,json=sessionStrategy,proto3,enum=runme.runner.v1.SessionStrategy" json:"session_strategy,omitempty"`
	// project used to load environment variables from .env files.
	Project *Project `protobuf:"bytes,7,opt,name=project,proto3,oneof" json:"project,omitempty"`
	// language id associated with script
	LanguageId string `protobuf:"bytes,8,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	// retention determines how variables are retained once resolved.
	Retention     ResolveProgramRequest_Retention `protobuf:"varint,9,opt,name=retention,proto3,enum=runme.runner.v1.ResolveProgramRequest_Retention" json:"retention,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramRequest) Reset() {
	*x = ResolveProgramRequest{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramRequest) ProtoMessage() {}

func (x *ResolveProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramRequest.ProtoReflect.Descriptor instead.
func (*ResolveProgramRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{15}
}

func (x *ResolveProgramRequest) GetSource() isResolveProgramRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ResolveProgramRequest) GetCommands() *ResolveProgramCommandList {
	if x != nil {
		if x, ok := x.Source.(*ResolveProgramRequest_Commands); ok {
			return x.Commands
		}
	}
	return nil
}

func (x *ResolveProgramRequest) GetScript() string {
	if x != nil {
		if x, ok := x.Source.(*ResolveProgramRequest_Script); ok {
			return x.Script
		}
	}
	return ""
}

func (x *ResolveProgramRequest) GetMode() ResolveProgramRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return ResolveProgramRequest_MODE_UNSPECIFIED
}

func (x *ResolveProgramRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ResolveProgramRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ResolveProgramRequest) GetSessionStrategy() SessionStrategy {
	if x != nil {
		return x.SessionStrategy
	}
	return SessionStrategy_SESSION_STRATEGY_UNSPECIFIED
}

func (x *ResolveProgramRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *ResolveProgramRequest) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *ResolveProgramRequest) GetRetention() ResolveProgramRequest_Retention {
	if x != nil {
		return x.Retention
	}
	return ResolveProgramRequest_RETENTION_UNSPECIFIED
}

type isResolveProgramRequest_Source interface {
	isResolveProgramRequest_Source()
}

type ResolveProgramRequest_Commands struct {
	// commands are commands to be executed by the program.
	// The commands are joined and executed as a script.
	Commands *ResolveProgramCommandList `protobuf:"bytes,1,opt,name=commands,proto3,oneof"`
}

type ResolveProgramRequest_Script struct {
	// script is code to be executed by the program.
	// Individual lines are joined with the new line character.
	Script string `protobuf:"bytes,2,opt,name=script,proto3,oneof"`
}

func (*ResolveProgramRequest_Commands) isResolveProgramRequest_Source() {}

func (*ResolveProgramRequest_Script) isResolveProgramRequest_Source() {}

type ResolveProgramResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Script string                 `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	// use script until commands normalization is implemented
	Commands      *ResolveProgramCommandList          `protobuf:"bytes,2,opt,name=commands,proto3" json:"commands,omitempty"`
	Vars          []*ResolveProgramResponse_VarResult `protobuf:"bytes,3,rep,name=vars,proto3" json:"vars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramResponse) Reset() {
	*x = ResolveProgramResponse{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramResponse) ProtoMessage() {}

func (x *ResolveProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramResponse.ProtoReflect.Descriptor instead.
func (*ResolveProgramResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{16}
}

func (x *ResolveProgramResponse) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ResolveProgramResponse) GetCommands() *ResolveProgramCommandList {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ResolveProgramResponse) GetVars() []*ResolveProgramResponse_VarResult {
	if x != nil {
		return x.Vars
	}
	return nil
}

type MonitorEnvStoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *Session               `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreRequest) Reset() {
	*x = MonitorEnvStoreRequest{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreRequest) ProtoMessage() {}

func (x *MonitorEnvStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreRequest.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreRequest) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{17}
}

func (x *MonitorEnvStoreRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type MonitorEnvStoreResponseSnapshot struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Envs          []*MonitorEnvStoreResponseSnapshot_SnapshotEnv `protobuf:"bytes,1,rep,name=envs,proto3" json:"envs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponseSnapshot) Reset() {
	*x = MonitorEnvStoreResponseSnapshot{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponseSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponseSnapshot) ProtoMessage() {}

func (x *MonitorEnvStoreResponseSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponseSnapshot) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{18}
}

func (x *MonitorEnvStoreResponseSnapshot) GetEnvs() []*MonitorEnvStoreResponseSnapshot_SnapshotEnv {
	if x != nil {
		return x.Envs
	}
	return nil
}

type MonitorEnvStoreResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  MonitorEnvStoreType    `protobuf:"varint,1,opt,name=type,proto3,enum=runme.runner.v1.MonitorEnvStoreType" json:"type,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*MonitorEnvStoreResponse_Snapshot
	Data          isMonitorEnvStoreResponse_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponse) Reset() {
	*x = MonitorEnvStoreResponse{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponse) ProtoMessage() {}

func (x *MonitorEnvStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponse.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponse) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{19}
}

func (x *MonitorEnvStoreResponse) GetType() MonitorEnvStoreType {
	if x != nil {
		return x.Type
	}
	return MonitorEnvStoreType_MONITOR_ENV_STORE_TYPE_UNSPECIFIED
}

func (x *MonitorEnvStoreResponse) GetData() isMonitorEnvStoreResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MonitorEnvStoreResponse) GetSnapshot() *MonitorEnvStoreResponseSnapshot {
	if x != nil {
		if x, ok := x.Data.(*MonitorEnvStoreResponse_Snapshot); ok {
			return x.Snapshot
		}
	}
	return nil
}

type isMonitorEnvStoreResponse_Data interface {
	isMonitorEnvStoreResponse_Data()
}

type MonitorEnvStoreResponse_Snapshot struct {
	Snapshot *MonitorEnvStoreResponseSnapshot `protobuf:"bytes,2,opt,name=snapshot,proto3,oneof"`
}

func (*MonitorEnvStoreResponse_Snapshot) isMonitorEnvStoreResponse_Data() {}

type ResolveProgramResponse_VarResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// prompt indicates the resolution status of the env variable.
	Status ResolveProgramResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=runme.runner.v1.ResolveProgramResponse_Status" json:"status,omitempty"`
	// name is the name of the environment variable.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// original_value is a default value of the environment variable.
	// It might be a value that is assigned to the variable in the script,
	// like FOO=bar or FOO=${FOO:-bar}.
	// If the variable is not assigned, it is an empty string.
	OriginalValue string `protobuf:"bytes,3,opt,name=original_value,json=originalValue,proto3" json:"original_value,omitempty"`
	// resolved_value is a value of the environment variable resolved from a source.
	// If it is an empty string, it means that the environment variable is not resolved.
	ResolvedValue string `protobuf:"bytes,4,opt,name=resolved_value,json=resolvedValue,proto3" json:"resolved_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveProgramResponse_VarResult) Reset() {
	*x = ResolveProgramResponse_VarResult{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveProgramResponse_VarResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveProgramResponse_VarResult) ProtoMessage() {}

func (x *ResolveProgramResponse_VarResult) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveProgramResponse_VarResult.ProtoReflect.Descriptor instead.
func (*ResolveProgramResponse_VarResult) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ResolveProgramResponse_VarResult) GetStatus() ResolveProgramResponse_Status {
	if x != nil {
		return x.Status
	}
	return ResolveProgramResponse_STATUS_UNSPECIFIED
}

func (x *ResolveProgramResponse_VarResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResolveProgramResponse_VarResult) GetOriginalValue() string {
	if x != nil {
		return x.OriginalValue
	}
	return ""
}

func (x *ResolveProgramResponse_VarResult) GetResolvedValue() string {
	if x != nil {
		return x.ResolvedValue
	}
	return ""
}

type MonitorEnvStoreResponseSnapshot_SnapshotEnv struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Status        MonitorEnvStoreResponseSnapshot_Status   `protobuf:"varint,1,opt,name=status,proto3,enum=runme.runner.v1.MonitorEnvStoreResponseSnapshot_Status" json:"status,omitempty"`
	Name          string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Spec          string                                   `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Origin        string                                   `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	OriginalValue string                                   `protobuf:"bytes,5,opt,name=original_value,json=originalValue,proto3" json:"original_value,omitempty"`
	ResolvedValue string                                   `protobuf:"bytes,6,opt,name=resolved_value,json=resolvedValue,proto3" json:"resolved_value,omitempty"`
	CreateTime    string                                   `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string                                   `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Errors        []*MonitorEnvStoreResponseSnapshot_Error `protobuf:"bytes,9,rep,name=errors,proto3" json:"errors,omitempty"`
	IsRequired    bool                                     `protobuf:"varint,10,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	Description   string                                   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) Reset() {
	*x = MonitorEnvStoreResponseSnapshot_SnapshotEnv{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponseSnapshot_SnapshotEnv) ProtoMessage() {}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot_SnapshotEnv.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponseSnapshot_SnapshotEnv) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{18, 0}
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetStatus() MonitorEnvStoreResponseSnapshot_Status {
	if x != nil {
		return x.Status
	}
	return MonitorEnvStoreResponseSnapshot_STATUS_UNSPECIFIED
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetOriginalValue() string {
	if x != nil {
		return x.OriginalValue
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetResolvedValue() string {
	if x != nil {
		return x.ResolvedValue
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetErrors() []*MonitorEnvStoreResponseSnapshot_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *MonitorEnvStoreResponseSnapshot_SnapshotEnv) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type MonitorEnvStoreResponseSnapshot_Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorEnvStoreResponseSnapshot_Error) Reset() {
	*x = MonitorEnvStoreResponseSnapshot_Error{}
	mi := &file_runme_runner_v1_runner_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorEnvStoreResponseSnapshot_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorEnvStoreResponseSnapshot_Error) ProtoMessage() {}

func (x *MonitorEnvStoreResponseSnapshot_Error) ProtoReflect() protoreflect.Message {
	mi := &file_runme_runner_v1_runner_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorEnvStoreResponseSnapshot_Error.ProtoReflect.Descriptor instead.
func (*MonitorEnvStoreResponseSnapshot_Error) Descriptor() ([]byte, []int) {
	return file_runme_runner_v1_runner_proto_rawDescGZIP(), []int{18, 1}
}

func (x *MonitorEnvStoreResponseSnapshot_Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MonitorEnvStoreResponseSnapshot_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_runme_runner_v1_runner_proto protoreflect.FileDescriptor

var file_runme_runner_v1_runner_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xae, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x6e, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12,
	0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc9, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x75,
	0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e,
	0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x37,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x4b, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x4c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6d,
	0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x26, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1,
	0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x4c, 0x6f, 0x61, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x6e, 0x76, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x45, 0x6e, 0x76, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x44, 0x69,
	0x72, 0x65, 0x6e, 0x76, 0x22, 0x6c, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x45, 0x6e, 0x76, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x49, 0x52, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x52, 0x5f, 0x45,
	0x4e, 0x56, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x52, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x49, 0x52, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x22, 0x4d, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x79, 0x22, 0x9f, 0x06, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x6e,
	0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x37,
	0x0a, 0x07, 0x77, 0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x07, 0x77, 0x69, 0x6e,
	0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x01,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x77, 0x69, 0x6e, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x49, 0x44, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x31, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x99, 0x05, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x01, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02,
	0x22, 0x57, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x54, 0x45,
	0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x9e, 0x04, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x76, 0x61,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x1a, 0xb5, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56,
	0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x04,
	0x22, 0x4c, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75,
	0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xca,
	0x05, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x04,
	0x65, 0x6e, 0x76, 0x73, 0x1a, 0xc1, 0x03, 0x0a, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x45, 0x6e, 0x76, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e,
	0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x5a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x54, 0x45,
	0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x22, 0xab, 0x01, 0x0a, 0x17,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45,
	0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x5d, 0x0a, 0x13, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4c, 0x10, 0x01, 0x2a, 0x5e, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x9a, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x48,
	0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x47,
	0x47, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x55, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4d,
	0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x62, 0x0a, 0x13,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x4e, 0x56, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4d,
	0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01,
	0x32, 0xae, 0x05, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x75, 0x6e,
	0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68,
	0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x27, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x72, 0x75, 0x6e,
	0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x26,
	0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x76,
	0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_runme_runner_v1_runner_proto_rawDescOnce sync.Once
	file_runme_runner_v1_runner_proto_rawDescData []byte
)

func file_runme_runner_v1_runner_proto_rawDescGZIP() []byte {
	file_runme_runner_v1_runner_proto_rawDescOnce.Do(func() {
		file_runme_runner_v1_runner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runme_runner_v1_runner_proto_rawDesc), len(file_runme_runner_v1_runner_proto_rawDesc)))
	})
	return file_runme_runner_v1_runner_proto_rawDescData
}

var file_runme_runner_v1_runner_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_runme_runner_v1_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_runme_runner_v1_runner_proto_goTypes = []any{
	(SessionEnvStoreType)(0),                            // 0: runme.runner.v1.SessionEnvStoreType
	(ExecuteStop)(0),                                    // 1: runme.runner.v1.ExecuteStop
	(CommandMode)(0),                                    // 2: runme.runner.v1.CommandMode
	(SessionStrategy)(0),                                // 3: runme.runner.v1.SessionStrategy
	(MonitorEnvStoreType)(0),                            // 4: runme.runner.v1.MonitorEnvStoreType
	(Project_DirEnv)(0),                                 // 5: runme.runner.v1.Project.DirEnv
	(ResolveProgramRequest_Mode)(0),                     // 6: runme.runner.v1.ResolveProgramRequest.Mode
	(ResolveProgramRequest_Retention)(0),                // 7: runme.runner.v1.ResolveProgramRequest.Retention
	(ResolveProgramResponse_Status)(0),                  // 8: runme.runner.v1.ResolveProgramResponse.Status
	(MonitorEnvStoreResponseSnapshot_Status)(0),         // 9: runme.runner.v1.MonitorEnvStoreResponseSnapshot.Status
	(*Session)(nil),                                     // 10: runme.runner.v1.Session
	(*CreateSessionRequest)(nil),                        // 11: runme.runner.v1.CreateSessionRequest
	(*CreateSessionResponse)(nil),                       // 12: runme.runner.v1.CreateSessionResponse
	(*GetSessionRequest)(nil),                           // 13: runme.runner.v1.GetSessionRequest
	(*GetSessionResponse)(nil),                          // 14: runme.runner.v1.GetSessionResponse
	(*ListSessionsRequest)(nil),                         // 15: runme.runner.v1.ListSessionsRequest
	(*ListSessionsResponse)(nil),                        // 16: runme.runner.v1.ListSessionsResponse
	(*DeleteSessionRequest)(nil),                        // 17: runme.runner.v1.DeleteSessionRequest
	(*DeleteSessionResponse)(nil),                       // 18: runme.runner.v1.DeleteSessionResponse
	(*Project)(nil),                                     // 19: runme.runner.v1.Project
	(*Winsize)(nil),                                     // 20: runme.runner.v1.Winsize
	(*ExecuteRequest)(nil),                              // 21: runme.runner.v1.ExecuteRequest
	(*ProcessPID)(nil),                                  // 22: runme.runner.v1.ProcessPID
	(*ExecuteResponse)(nil),                             // 23: runme.runner.v1.ExecuteResponse
	(*ResolveProgramCommandList)(nil),                   // 24: runme.runner.v1.ResolveProgramCommandList
	(*ResolveProgramRequest)(nil),                       // 25: runme.runner.v1.ResolveProgramRequest
	(*ResolveProgramResponse)(nil),                      // 26: runme.runner.v1.ResolveProgramResponse
	(*MonitorEnvStoreRequest)(nil),                      // 27: runme.runner.v1.MonitorEnvStoreRequest
	(*MonitorEnvStoreResponseSnapshot)(nil),             // 28: runme.runner.v1.MonitorEnvStoreResponseSnapshot
	(*MonitorEnvStoreResponse)(nil),                     // 29: runme.runner.v1.MonitorEnvStoreResponse
	nil,                                                 // 30: runme.runner.v1.Session.MetadataEntry
	nil,                                                 // 31: runme.runner.v1.CreateSessionRequest.MetadataEntry
	(*ResolveProgramResponse_VarResult)(nil),            // 32: runme.runner.v1.ResolveProgramResponse.VarResult
	(*MonitorEnvStoreResponseSnapshot_SnapshotEnv)(nil), // 33: runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv
	(*MonitorEnvStoreResponseSnapshot_Error)(nil),       // 34: runme.runner.v1.MonitorEnvStoreResponseSnapshot.Error
	(*wrapperspb.UInt32Value)(nil),                      // 35: google.protobuf.UInt32Value
}
var file_runme_runner_v1_runner_proto_depIdxs = []int32{
	30, // 0: runme.runner.v1.Session.metadata:type_name -> runme.runner.v1.Session.MetadataEntry
	31, // 1: runme.runner.v1.CreateSessionRequest.metadata:type_name -> runme.runner.v1.CreateSessionRequest.MetadataEntry
	19, // 2: runme.runner.v1.CreateSessionRequest.project:type_name -> runme.runner.v1.Project
	0,  // 3: runme.runner.v1.CreateSessionRequest.env_store_type:type_name -> runme.runner.v1.SessionEnvStoreType
	10, // 4: runme.runner.v1.CreateSessionResponse.session:type_name -> runme.runner.v1.Session
	10, // 5: runme.runner.v1.GetSessionResponse.session:type_name -> runme.runner.v1.Session
	10, // 6: runme.runner.v1.ListSessionsResponse.sessions:type_name -> runme.runner.v1.Session
	5,  // 7: runme.runner.v1.Project.env_direnv:type_name -> runme.runner.v1.Project.DirEnv
	1,  // 8: runme.runner.v1.ExecuteRequest.stop:type_name -> runme.runner.v1.ExecuteStop
	20, // 9: runme.runner.v1.ExecuteRequest.winsize:type_name -> runme.runner.v1.Winsize
	3,  // 10: runme.runner.v1.ExecuteRequest.session_strategy:type_name -> runme.runner.v1.SessionStrategy
	19, // 11: runme.runner.v1.ExecuteRequest.project:type_name -> runme.runner.v1.Project
	2,  // 12: runme.runner.v1.ExecuteRequest.command_mode:type_name -> runme.runner.v1.CommandMode
	35, // 13: runme.runner.v1.ExecuteResponse.exit_code:type_name -> google.protobuf.UInt32Value
	22, // 14: runme.runner.v1.ExecuteResponse.pid:type_name -> runme.runner.v1.ProcessPID
	24, // 15: runme.runner.v1.ResolveProgramRequest.commands:type_name -> runme.runner.v1.ResolveProgramCommandList
	6,  // 16: runme.runner.v1.ResolveProgramRequest.mode:type_name -> runme.runner.v1.ResolveProgramRequest.Mode
	3,  // 17: runme.runner.v1.ResolveProgramRequest.session_strategy:type_name -> runme.runner.v1.SessionStrategy
	19, // 18: runme.runner.v1.ResolveProgramRequest.project:type_name -> runme.runner.v1.Project
	7,  // 19: runme.runner.v1.ResolveProgramRequest.retention:type_name -> runme.runner.v1.ResolveProgramRequest.Retention
	24, // 20: runme.runner.v1.ResolveProgramResponse.commands:type_name -> runme.runner.v1.ResolveProgramCommandList
	32, // 21: runme.runner.v1.ResolveProgramResponse.vars:type_name -> runme.runner.v1.ResolveProgramResponse.VarResult
	10, // 22: runme.runner.v1.MonitorEnvStoreRequest.session:type_name -> runme.runner.v1.Session
	33, // 23: runme.runner.v1.MonitorEnvStoreResponseSnapshot.envs:type_name -> runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv
	4,  // 24: runme.runner.v1.MonitorEnvStoreResponse.type:type_name -> runme.runner.v1.MonitorEnvStoreType
	28, // 25: runme.runner.v1.MonitorEnvStoreResponse.snapshot:type_name -> runme.runner.v1.MonitorEnvStoreResponseSnapshot
	8,  // 26: runme.runner.v1.ResolveProgramResponse.VarResult.status:type_name -> runme.runner.v1.ResolveProgramResponse.Status
	9,  // 27: runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv.status:type_name -> runme.runner.v1.MonitorEnvStoreResponseSnapshot.Status
	34, // 28: runme.runner.v1.MonitorEnvStoreResponseSnapshot.SnapshotEnv.errors:type_name -> runme.runner.v1.MonitorEnvStoreResponseSnapshot.Error
	11, // 29: runme.runner.v1.RunnerService.CreateSession:input_type -> runme.runner.v1.CreateSessionRequest
	13, // 30: runme.runner.v1.RunnerService.GetSession:input_type -> runme.runner.v1.GetSessionRequest
	15, // 31: runme.runner.v1.RunnerService.ListSessions:input_type -> runme.runner.v1.ListSessionsRequest
	17, // 32: runme.runner.v1.RunnerService.DeleteSession:input_type -> runme.runner.v1.DeleteSessionRequest
	27, // 33: runme.runner.v1.RunnerService.MonitorEnvStore:input_type -> runme.runner.v1.MonitorEnvStoreRequest
	21, // 34: runme.runner.v1.RunnerService.Execute:input_type -> runme.runner.v1.ExecuteRequest
	25, // 35: runme.runner.v1.RunnerService.ResolveProgram:input_type -> runme.runner.v1.ResolveProgramRequest
	12, // 36: runme.runner.v1.RunnerService.CreateSession:output_type -> runme.runner.v1.CreateSessionResponse
	14, // 37: runme.runner.v1.RunnerService.GetSession:output_type -> runme.runner.v1.GetSessionResponse
	16, // 38: runme.runner.v1.RunnerService.ListSessions:output_type -> runme.runner.v1.ListSessionsResponse
	18, // 39: runme.runner.v1.RunnerService.DeleteSession:output_type -> runme.runner.v1.DeleteSessionResponse
	29, // 40: runme.runner.v1.RunnerService.MonitorEnvStore:output_type -> runme.runner.v1.MonitorEnvStoreResponse
	23, // 41: runme.runner.v1.RunnerService.Execute:output_type -> runme.runner.v1.ExecuteResponse
	26, // 42: runme.runner.v1.RunnerService.ResolveProgram:output_type -> runme.runner.v1.ResolveProgramResponse
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_runme_runner_v1_runner_proto_init() }
func file_runme_runner_v1_runner_proto_init() {
	if File_runme_runner_v1_runner_proto != nil {
		return
	}
	file_runme_runner_v1_runner_proto_msgTypes[1].OneofWrappers = []any{}
	file_runme_runner_v1_runner_proto_msgTypes[11].OneofWrappers = []any{}
	file_runme_runner_v1_runner_proto_msgTypes[15].OneofWrappers = []any{
		(*ResolveProgramRequest_Commands)(nil),
		(*ResolveProgramRequest_Script)(nil),
	}
	file_runme_runner_v1_runner_proto_msgTypes[19].OneofWrappers = []any{
		(*MonitorEnvStoreResponse_Snapshot)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runme_runner_v1_runner_proto_rawDesc), len(file_runme_runner_v1_runner_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runme_runner_v1_runner_proto_goTypes,
		DependencyIndexes: file_runme_runner_v1_runner_proto_depIdxs,
		EnumInfos:         file_runme_runner_v1_runner_proto_enumTypes,
		MessageInfos:      file_runme_runner_v1_runner_proto_msgTypes,
	}.Build()
	File_runme_runner_v1_runner_proto = out.File
	file_runme_runner_v1_runner_proto_goTypes = nil
	file_runme_runner_v1_runner_proto_depIdxs = nil
}
