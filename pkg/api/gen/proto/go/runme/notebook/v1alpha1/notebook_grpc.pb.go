// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: runme/notebook/v1alpha1/notebook.proto

package notebookv1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotebookService_ResolveNotebook_FullMethodName = "/runme.notebook.v1alpha1.NotebookService/ResolveNotebook"
)

// NotebookServiceClient is the client API for NotebookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotebookServiceClient interface {
	// ResolveNotebook takes [runme.parser.v1.Notebook] and a cell index and
	// returns a script that runs the cell taking the whole notebook into account.
	ResolveNotebook(ctx context.Context, in *ResolveNotebookRequest, opts ...grpc.CallOption) (*ResolveNotebookResponse, error)
}

type notebookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotebookServiceClient(cc grpc.ClientConnInterface) NotebookServiceClient {
	return &notebookServiceClient{cc}
}

func (c *notebookServiceClient) ResolveNotebook(ctx context.Context, in *ResolveNotebookRequest, opts ...grpc.CallOption) (*ResolveNotebookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveNotebookResponse)
	err := c.cc.Invoke(ctx, NotebookService_ResolveNotebook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotebookServiceServer is the server API for NotebookService service.
// All implementations must embed UnimplementedNotebookServiceServer
// for forward compatibility.
type NotebookServiceServer interface {
	// ResolveNotebook takes [runme.parser.v1.Notebook] and a cell index and
	// returns a script that runs the cell taking the whole notebook into account.
	ResolveNotebook(context.Context, *ResolveNotebookRequest) (*ResolveNotebookResponse, error)
	mustEmbedUnimplementedNotebookServiceServer()
}

// UnimplementedNotebookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotebookServiceServer struct{}

func (UnimplementedNotebookServiceServer) ResolveNotebook(context.Context, *ResolveNotebookRequest) (*ResolveNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveNotebook not implemented")
}
func (UnimplementedNotebookServiceServer) mustEmbedUnimplementedNotebookServiceServer() {}
func (UnimplementedNotebookServiceServer) testEmbeddedByValue()                         {}

// UnsafeNotebookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotebookServiceServer will
// result in compilation errors.
type UnsafeNotebookServiceServer interface {
	mustEmbedUnimplementedNotebookServiceServer()
}

func RegisterNotebookServiceServer(s grpc.ServiceRegistrar, srv NotebookServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotebookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotebookService_ServiceDesc, srv)
}

func _NotebookService_ResolveNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveNotebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotebookServiceServer).ResolveNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotebookService_ResolveNotebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotebookServiceServer).ResolveNotebook(ctx, req.(*ResolveNotebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotebookService_ServiceDesc is the grpc.ServiceDesc for NotebookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotebookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runme.notebook.v1alpha1.NotebookService",
	HandlerType: (*NotebookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveNotebook",
			Handler:    _NotebookService_ResolveNotebook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runme/notebook/v1alpha1/notebook.proto",
}
