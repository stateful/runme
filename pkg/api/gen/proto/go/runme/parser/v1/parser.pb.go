// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: runme/parser/v1/parser.proto

package parserv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellKind int32

const (
	CellKind_CELL_KIND_UNSPECIFIED CellKind = 0
	CellKind_CELL_KIND_MARKUP      CellKind = 1
	CellKind_CELL_KIND_CODE        CellKind = 2
)

// Enum value maps for CellKind.
var (
	CellKind_name = map[int32]string{
		0: "CELL_KIND_UNSPECIFIED",
		1: "CELL_KIND_MARKUP",
		2: "CELL_KIND_CODE",
	}
	CellKind_value = map[string]int32{
		"CELL_KIND_UNSPECIFIED": 0,
		"CELL_KIND_MARKUP":      1,
		"CELL_KIND_CODE":        2,
	}
)

func (x CellKind) Enum() *CellKind {
	p := new(CellKind)
	*p = x
	return p
}

func (x CellKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellKind) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_parser_v1_parser_proto_enumTypes[0].Descriptor()
}

func (CellKind) Type() protoreflect.EnumType {
	return &file_runme_parser_v1_parser_proto_enumTypes[0]
}

func (x CellKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellKind.Descriptor instead.
func (CellKind) EnumDescriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{0}
}

type RunmeIdentity int32

const (
	RunmeIdentity_RUNME_IDENTITY_UNSPECIFIED RunmeIdentity = 0 // aka NONE
	RunmeIdentity_RUNME_IDENTITY_ALL         RunmeIdentity = 1
	RunmeIdentity_RUNME_IDENTITY_DOCUMENT    RunmeIdentity = 2
	RunmeIdentity_RUNME_IDENTITY_CELL        RunmeIdentity = 3
)

// Enum value maps for RunmeIdentity.
var (
	RunmeIdentity_name = map[int32]string{
		0: "RUNME_IDENTITY_UNSPECIFIED",
		1: "RUNME_IDENTITY_ALL",
		2: "RUNME_IDENTITY_DOCUMENT",
		3: "RUNME_IDENTITY_CELL",
	}
	RunmeIdentity_value = map[string]int32{
		"RUNME_IDENTITY_UNSPECIFIED": 0,
		"RUNME_IDENTITY_ALL":         1,
		"RUNME_IDENTITY_DOCUMENT":    2,
		"RUNME_IDENTITY_CELL":        3,
	}
)

func (x RunmeIdentity) Enum() *RunmeIdentity {
	p := new(RunmeIdentity)
	*p = x
	return p
}

func (x RunmeIdentity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunmeIdentity) Descriptor() protoreflect.EnumDescriptor {
	return file_runme_parser_v1_parser_proto_enumTypes[1].Descriptor()
}

func (RunmeIdentity) Type() protoreflect.EnumType {
	return &file_runme_parser_v1_parser_proto_enumTypes[1]
}

func (x RunmeIdentity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunmeIdentity.Descriptor instead.
func (RunmeIdentity) EnumDescriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{1}
}

type Notebook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cells         []*Cell                `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Frontmatter   *Frontmatter           `protobuf:"bytes,3,opt,name=frontmatter,proto3" json:"frontmatter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notebook) Reset() {
	*x = Notebook{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notebook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notebook) ProtoMessage() {}

func (x *Notebook) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notebook.ProtoReflect.Descriptor instead.
func (*Notebook) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{0}
}

func (x *Notebook) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *Notebook) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Notebook) GetFrontmatter() *Frontmatter {
	if x != nil {
		return x.Frontmatter
	}
	return nil
}

type ExecutionSummaryTiming struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionSummaryTiming) Reset() {
	*x = ExecutionSummaryTiming{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionSummaryTiming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionSummaryTiming) ProtoMessage() {}

func (x *ExecutionSummaryTiming) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionSummaryTiming.ProtoReflect.Descriptor instead.
func (*ExecutionSummaryTiming) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionSummaryTiming) GetStartTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ExecutionSummaryTiming) GetEndTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type CellOutputItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Mime          string                 `protobuf:"bytes,3,opt,name=mime,proto3" json:"mime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CellOutputItem) Reset() {
	*x = CellOutputItem{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellOutputItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellOutputItem) ProtoMessage() {}

func (x *CellOutputItem) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellOutputItem.ProtoReflect.Descriptor instead.
func (*CellOutputItem) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{2}
}

func (x *CellOutputItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CellOutputItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CellOutputItem) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

type ProcessInfoExitReason struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          string                  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Code          *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessInfoExitReason) Reset() {
	*x = ProcessInfoExitReason{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessInfoExitReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfoExitReason) ProtoMessage() {}

func (x *ProcessInfoExitReason) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfoExitReason.ProtoReflect.Descriptor instead.
func (*ProcessInfoExitReason) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessInfoExitReason) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProcessInfoExitReason) GetCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

type CellOutputProcessInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExitReason    *ProcessInfoExitReason `protobuf:"bytes,1,opt,name=exit_reason,json=exitReason,proto3" json:"exit_reason,omitempty"`
	Pid           *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CellOutputProcessInfo) Reset() {
	*x = CellOutputProcessInfo{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellOutputProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellOutputProcessInfo) ProtoMessage() {}

func (x *CellOutputProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellOutputProcessInfo.ProtoReflect.Descriptor instead.
func (*CellOutputProcessInfo) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{4}
}

func (x *CellOutputProcessInfo) GetExitReason() *ProcessInfoExitReason {
	if x != nil {
		return x.ExitReason
	}
	return nil
}

func (x *CellOutputProcessInfo) GetPid() *wrapperspb.Int64Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

type CellOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*CellOutputItem      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ProcessInfo   *CellOutputProcessInfo `protobuf:"bytes,3,opt,name=process_info,json=processInfo,proto3" json:"process_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CellOutput) Reset() {
	*x = CellOutput{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellOutput) ProtoMessage() {}

func (x *CellOutput) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellOutput.ProtoReflect.Descriptor instead.
func (*CellOutput) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{5}
}

func (x *CellOutput) GetItems() []*CellOutputItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CellOutput) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CellOutput) GetProcessInfo() *CellOutputProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

type CellExecutionSummary struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	ExecutionOrder *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=execution_order,json=executionOrder,proto3" json:"execution_order,omitempty"`
	Success        *wrapperspb.BoolValue   `protobuf:"bytes,2,opt,name=success,proto3" json:"success,omitempty"`
	Timing         *ExecutionSummaryTiming `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CellExecutionSummary) Reset() {
	*x = CellExecutionSummary{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CellExecutionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellExecutionSummary) ProtoMessage() {}

func (x *CellExecutionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellExecutionSummary.ProtoReflect.Descriptor instead.
func (*CellExecutionSummary) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{6}
}

func (x *CellExecutionSummary) GetExecutionOrder() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ExecutionOrder
	}
	return nil
}

func (x *CellExecutionSummary) GetSuccess() *wrapperspb.BoolValue {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *CellExecutionSummary) GetTiming() *ExecutionSummaryTiming {
	if x != nil {
		return x.Timing
	}
	return nil
}

type TextRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         uint32                 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           uint32                 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextRange) Reset() {
	*x = TextRange{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextRange) ProtoMessage() {}

func (x *TextRange) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextRange.ProtoReflect.Descriptor instead.
func (*TextRange) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{7}
}

func (x *TextRange) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TextRange) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type Cell struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Kind             CellKind               `protobuf:"varint,1,opt,name=kind,proto3,enum=runme.parser.v1.CellKind" json:"kind,omitempty"`
	Value            string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	LanguageId       string                 `protobuf:"bytes,3,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TextRange        *TextRange             `protobuf:"bytes,5,opt,name=text_range,json=textRange,proto3" json:"text_range,omitempty"`
	Outputs          []*CellOutput          `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	ExecutionSummary *CellExecutionSummary  `protobuf:"bytes,7,opt,name=execution_summary,json=executionSummary,proto3" json:"execution_summary,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Cell) Reset() {
	*x = Cell{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{8}
}

func (x *Cell) GetKind() CellKind {
	if x != nil {
		return x.Kind
	}
	return CellKind_CELL_KIND_UNSPECIFIED
}

func (x *Cell) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Cell) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *Cell) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Cell) GetTextRange() *TextRange {
	if x != nil {
		return x.TextRange
	}
	return nil
}

func (x *Cell) GetOutputs() []*CellOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Cell) GetExecutionSummary() *CellExecutionSummary {
	if x != nil {
		return x.ExecutionSummary
	}
	return nil
}

type RunmeSessionDocument struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelativePath  string                 `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunmeSessionDocument) Reset() {
	*x = RunmeSessionDocument{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunmeSessionDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunmeSessionDocument) ProtoMessage() {}

func (x *RunmeSessionDocument) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunmeSessionDocument.ProtoReflect.Descriptor instead.
func (*RunmeSessionDocument) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{9}
}

func (x *RunmeSessionDocument) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

type RunmeSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Document      *RunmeSessionDocument  `protobuf:"bytes,2,opt,name=document,proto3" json:"document,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunmeSession) Reset() {
	*x = RunmeSession{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunmeSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunmeSession) ProtoMessage() {}

func (x *RunmeSession) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunmeSession.ProtoReflect.Descriptor instead.
func (*RunmeSession) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{10}
}

func (x *RunmeSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunmeSession) GetDocument() *RunmeSessionDocument {
	if x != nil {
		return x.Document
	}
	return nil
}

type FrontmatterRunme struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Session       *RunmeSession          `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrontmatterRunme) Reset() {
	*x = FrontmatterRunme{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrontmatterRunme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontmatterRunme) ProtoMessage() {}

func (x *FrontmatterRunme) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrontmatterRunme.ProtoReflect.Descriptor instead.
func (*FrontmatterRunme) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{11}
}

func (x *FrontmatterRunme) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FrontmatterRunme) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FrontmatterRunme) GetSession() *RunmeSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type Frontmatter struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Shell       string                 `protobuf:"bytes,1,opt,name=shell,proto3" json:"shell,omitempty"`
	Cwd         string                 `protobuf:"bytes,2,opt,name=cwd,proto3" json:"cwd,omitempty"`
	SkipPrompts bool                   `protobuf:"varint,3,opt,name=skip_prompts,json=skipPrompts,proto3" json:"skip_prompts,omitempty"`
	Runme       *FrontmatterRunme      `protobuf:"bytes,4,opt,name=runme,proto3" json:"runme,omitempty"`
	// Deprecated category in favor of Tag
	Category      string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	TerminalRows  string `protobuf:"bytes,6,opt,name=terminal_rows,json=terminalRows,proto3" json:"terminal_rows,omitempty"`
	Tag           string `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Frontmatter) Reset() {
	*x = Frontmatter{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frontmatter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frontmatter) ProtoMessage() {}

func (x *Frontmatter) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frontmatter.ProtoReflect.Descriptor instead.
func (*Frontmatter) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{12}
}

func (x *Frontmatter) GetShell() string {
	if x != nil {
		return x.Shell
	}
	return ""
}

func (x *Frontmatter) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Frontmatter) GetSkipPrompts() bool {
	if x != nil {
		return x.SkipPrompts
	}
	return false
}

func (x *Frontmatter) GetRunme() *FrontmatterRunme {
	if x != nil {
		return x.Runme
	}
	return nil
}

func (x *Frontmatter) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Frontmatter) GetTerminalRows() string {
	if x != nil {
		return x.TerminalRows
	}
	return ""
}

func (x *Frontmatter) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type DeserializeRequestOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identity      RunmeIdentity          `protobuf:"varint,1,opt,name=identity,proto3,enum=runme.parser.v1.RunmeIdentity" json:"identity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeserializeRequestOptions) Reset() {
	*x = DeserializeRequestOptions{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeserializeRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeserializeRequestOptions) ProtoMessage() {}

func (x *DeserializeRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeserializeRequestOptions.ProtoReflect.Descriptor instead.
func (*DeserializeRequestOptions) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{13}
}

func (x *DeserializeRequestOptions) GetIdentity() RunmeIdentity {
	if x != nil {
		return x.Identity
	}
	return RunmeIdentity_RUNME_IDENTITY_UNSPECIFIED
}

type DeserializeRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Source        []byte                     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Options       *DeserializeRequestOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeserializeRequest) Reset() {
	*x = DeserializeRequest{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeserializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeserializeRequest) ProtoMessage() {}

func (x *DeserializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeserializeRequest.ProtoReflect.Descriptor instead.
func (*DeserializeRequest) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{14}
}

func (x *DeserializeRequest) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DeserializeRequest) GetOptions() *DeserializeRequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type DeserializeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notebook      *Notebook              `protobuf:"bytes,1,opt,name=notebook,proto3" json:"notebook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeserializeResponse) Reset() {
	*x = DeserializeResponse{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeserializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeserializeResponse) ProtoMessage() {}

func (x *DeserializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeserializeResponse.ProtoReflect.Descriptor instead.
func (*DeserializeResponse) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{15}
}

func (x *DeserializeResponse) GetNotebook() *Notebook {
	if x != nil {
		return x.Notebook
	}
	return nil
}

type SerializeRequestOutputOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Summary       bool                   `protobuf:"varint,2,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerializeRequestOutputOptions) Reset() {
	*x = SerializeRequestOutputOptions{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializeRequestOutputOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeRequestOutputOptions) ProtoMessage() {}

func (x *SerializeRequestOutputOptions) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeRequestOutputOptions.ProtoReflect.Descriptor instead.
func (*SerializeRequestOutputOptions) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{16}
}

func (x *SerializeRequestOutputOptions) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SerializeRequestOutputOptions) GetSummary() bool {
	if x != nil {
		return x.Summary
	}
	return false
}

type SerializeRequestOptions struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Outputs       *SerializeRequestOutputOptions `protobuf:"bytes,1,opt,name=outputs,proto3" json:"outputs,omitempty"`
	Session       *RunmeSession                  `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerializeRequestOptions) Reset() {
	*x = SerializeRequestOptions{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializeRequestOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeRequestOptions) ProtoMessage() {}

func (x *SerializeRequestOptions) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeRequestOptions.ProtoReflect.Descriptor instead.
func (*SerializeRequestOptions) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{17}
}

func (x *SerializeRequestOptions) GetOutputs() *SerializeRequestOutputOptions {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *SerializeRequestOptions) GetSession() *RunmeSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type SerializeRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Notebook      *Notebook                `protobuf:"bytes,1,opt,name=notebook,proto3" json:"notebook,omitempty"`
	Options       *SerializeRequestOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerializeRequest) Reset() {
	*x = SerializeRequest{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeRequest) ProtoMessage() {}

func (x *SerializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeRequest.ProtoReflect.Descriptor instead.
func (*SerializeRequest) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{18}
}

func (x *SerializeRequest) GetNotebook() *Notebook {
	if x != nil {
		return x.Notebook
	}
	return nil
}

func (x *SerializeRequest) GetOptions() *SerializeRequestOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type SerializeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        []byte                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerializeResponse) Reset() {
	*x = SerializeResponse{}
	mi := &file_runme_parser_v1_parser_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeResponse) ProtoMessage() {}

func (x *SerializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_parser_v1_parser_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeResponse.ProtoReflect.Descriptor instead.
func (*SerializeResponse) Descriptor() ([]byte, []int) {
	return file_runme_parser_v1_parser_proto_rawDescGZIP(), []int{19}
}

func (x *SerializeResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_runme_parser_v1_parser_proto protoreflect.FileDescriptor

var file_runme_parser_v1_parser_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf9, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x2b, 0x0a, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75,
	0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x75,
	0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x16,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x43, 0x65,
	0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x78, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x0a, 0x43, 0x65,
	0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4,
	0x01, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x33, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x04, 0x43,
	0x65, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x75,
	0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x11,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x10,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a,
	0x14, 0x52, 0x75, 0x6e, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x61, 0x0a, 0x0c, 0x52, 0x75,
	0x6e, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x75, 0x0a,
	0x10, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x37, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6d,
	0x65, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x57, 0x0a, 0x19, 0x44,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x6e,
	0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x72, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x53, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x17,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x4f, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x6d,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x55, 0x4e,
	0x4d, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4e,
	0x4d, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4e, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x55, 0x4e, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x03, 0x32, 0xc1, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4c, 0x5a, 0x4a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66,
	0x75, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x3b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_runme_parser_v1_parser_proto_rawDescOnce sync.Once
	file_runme_parser_v1_parser_proto_rawDescData []byte
)

func file_runme_parser_v1_parser_proto_rawDescGZIP() []byte {
	file_runme_parser_v1_parser_proto_rawDescOnce.Do(func() {
		file_runme_parser_v1_parser_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runme_parser_v1_parser_proto_rawDesc), len(file_runme_parser_v1_parser_proto_rawDesc)))
	})
	return file_runme_parser_v1_parser_proto_rawDescData
}

var file_runme_parser_v1_parser_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_runme_parser_v1_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_runme_parser_v1_parser_proto_goTypes = []any{
	(CellKind)(0),                         // 0: runme.parser.v1.CellKind
	(RunmeIdentity)(0),                    // 1: runme.parser.v1.RunmeIdentity
	(*Notebook)(nil),                      // 2: runme.parser.v1.Notebook
	(*ExecutionSummaryTiming)(nil),        // 3: runme.parser.v1.ExecutionSummaryTiming
	(*CellOutputItem)(nil),                // 4: runme.parser.v1.CellOutputItem
	(*ProcessInfoExitReason)(nil),         // 5: runme.parser.v1.ProcessInfoExitReason
	(*CellOutputProcessInfo)(nil),         // 6: runme.parser.v1.CellOutputProcessInfo
	(*CellOutput)(nil),                    // 7: runme.parser.v1.CellOutput
	(*CellExecutionSummary)(nil),          // 8: runme.parser.v1.CellExecutionSummary
	(*TextRange)(nil),                     // 9: runme.parser.v1.TextRange
	(*Cell)(nil),                          // 10: runme.parser.v1.Cell
	(*RunmeSessionDocument)(nil),          // 11: runme.parser.v1.RunmeSessionDocument
	(*RunmeSession)(nil),                  // 12: runme.parser.v1.RunmeSession
	(*FrontmatterRunme)(nil),              // 13: runme.parser.v1.FrontmatterRunme
	(*Frontmatter)(nil),                   // 14: runme.parser.v1.Frontmatter
	(*DeserializeRequestOptions)(nil),     // 15: runme.parser.v1.DeserializeRequestOptions
	(*DeserializeRequest)(nil),            // 16: runme.parser.v1.DeserializeRequest
	(*DeserializeResponse)(nil),           // 17: runme.parser.v1.DeserializeResponse
	(*SerializeRequestOutputOptions)(nil), // 18: runme.parser.v1.SerializeRequestOutputOptions
	(*SerializeRequestOptions)(nil),       // 19: runme.parser.v1.SerializeRequestOptions
	(*SerializeRequest)(nil),              // 20: runme.parser.v1.SerializeRequest
	(*SerializeResponse)(nil),             // 21: runme.parser.v1.SerializeResponse
	nil,                                   // 22: runme.parser.v1.Notebook.MetadataEntry
	nil,                                   // 23: runme.parser.v1.CellOutput.MetadataEntry
	nil,                                   // 24: runme.parser.v1.Cell.MetadataEntry
	(*wrapperspb.Int64Value)(nil),         // 25: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),        // 26: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),          // 27: google.protobuf.BoolValue
}
var file_runme_parser_v1_parser_proto_depIdxs = []int32{
	10, // 0: runme.parser.v1.Notebook.cells:type_name -> runme.parser.v1.Cell
	22, // 1: runme.parser.v1.Notebook.metadata:type_name -> runme.parser.v1.Notebook.MetadataEntry
	14, // 2: runme.parser.v1.Notebook.frontmatter:type_name -> runme.parser.v1.Frontmatter
	25, // 3: runme.parser.v1.ExecutionSummaryTiming.start_time:type_name -> google.protobuf.Int64Value
	25, // 4: runme.parser.v1.ExecutionSummaryTiming.end_time:type_name -> google.protobuf.Int64Value
	26, // 5: runme.parser.v1.ProcessInfoExitReason.code:type_name -> google.protobuf.UInt32Value
	5,  // 6: runme.parser.v1.CellOutputProcessInfo.exit_reason:type_name -> runme.parser.v1.ProcessInfoExitReason
	25, // 7: runme.parser.v1.CellOutputProcessInfo.pid:type_name -> google.protobuf.Int64Value
	4,  // 8: runme.parser.v1.CellOutput.items:type_name -> runme.parser.v1.CellOutputItem
	23, // 9: runme.parser.v1.CellOutput.metadata:type_name -> runme.parser.v1.CellOutput.MetadataEntry
	6,  // 10: runme.parser.v1.CellOutput.process_info:type_name -> runme.parser.v1.CellOutputProcessInfo
	26, // 11: runme.parser.v1.CellExecutionSummary.execution_order:type_name -> google.protobuf.UInt32Value
	27, // 12: runme.parser.v1.CellExecutionSummary.success:type_name -> google.protobuf.BoolValue
	3,  // 13: runme.parser.v1.CellExecutionSummary.timing:type_name -> runme.parser.v1.ExecutionSummaryTiming
	0,  // 14: runme.parser.v1.Cell.kind:type_name -> runme.parser.v1.CellKind
	24, // 15: runme.parser.v1.Cell.metadata:type_name -> runme.parser.v1.Cell.MetadataEntry
	9,  // 16: runme.parser.v1.Cell.text_range:type_name -> runme.parser.v1.TextRange
	7,  // 17: runme.parser.v1.Cell.outputs:type_name -> runme.parser.v1.CellOutput
	8,  // 18: runme.parser.v1.Cell.execution_summary:type_name -> runme.parser.v1.CellExecutionSummary
	11, // 19: runme.parser.v1.RunmeSession.document:type_name -> runme.parser.v1.RunmeSessionDocument
	12, // 20: runme.parser.v1.FrontmatterRunme.session:type_name -> runme.parser.v1.RunmeSession
	13, // 21: runme.parser.v1.Frontmatter.runme:type_name -> runme.parser.v1.FrontmatterRunme
	1,  // 22: runme.parser.v1.DeserializeRequestOptions.identity:type_name -> runme.parser.v1.RunmeIdentity
	15, // 23: runme.parser.v1.DeserializeRequest.options:type_name -> runme.parser.v1.DeserializeRequestOptions
	2,  // 24: runme.parser.v1.DeserializeResponse.notebook:type_name -> runme.parser.v1.Notebook
	18, // 25: runme.parser.v1.SerializeRequestOptions.outputs:type_name -> runme.parser.v1.SerializeRequestOutputOptions
	12, // 26: runme.parser.v1.SerializeRequestOptions.session:type_name -> runme.parser.v1.RunmeSession
	2,  // 27: runme.parser.v1.SerializeRequest.notebook:type_name -> runme.parser.v1.Notebook
	19, // 28: runme.parser.v1.SerializeRequest.options:type_name -> runme.parser.v1.SerializeRequestOptions
	16, // 29: runme.parser.v1.ParserService.Deserialize:input_type -> runme.parser.v1.DeserializeRequest
	20, // 30: runme.parser.v1.ParserService.Serialize:input_type -> runme.parser.v1.SerializeRequest
	17, // 31: runme.parser.v1.ParserService.Deserialize:output_type -> runme.parser.v1.DeserializeResponse
	21, // 32: runme.parser.v1.ParserService.Serialize:output_type -> runme.parser.v1.SerializeResponse
	31, // [31:33] is the sub-list for method output_type
	29, // [29:31] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_runme_parser_v1_parser_proto_init() }
func file_runme_parser_v1_parser_proto_init() {
	if File_runme_parser_v1_parser_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runme_parser_v1_parser_proto_rawDesc), len(file_runme_parser_v1_parser_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runme_parser_v1_parser_proto_goTypes,
		DependencyIndexes: file_runme_parser_v1_parser_proto_depIdxs,
		EnumInfos:         file_runme_parser_v1_parser_proto_enumTypes,
		MessageInfos:      file_runme_parser_v1_parser_proto_msgTypes,
	}.Build()
	File_runme_parser_v1_parser_proto = out.File
	file_runme_parser_v1_parser_proto_goTypes = nil
	file_runme_parser_v1_parser_proto_depIdxs = nil
}
