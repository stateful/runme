// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: runme/reporter/v1alpha1/reporter.proto

package reporterv1alpha1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	v1 "github.com/stateful/runme/v3/pkg/api/gen/proto/go/runme/parser/v1"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransformRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Notebook      *v1.Notebook               `protobuf:"bytes,1,opt,name=notebook,proto3" json:"notebook,omitempty"`
	Extension     *TransformRequestExtension `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformRequest) Reset() {
	*x = TransformRequest{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformRequest) ProtoMessage() {}

func (x *TransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformRequest.ProtoReflect.Descriptor instead.
func (*TransformRequest) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{0}
}

func (x *TransformRequest) GetNotebook() *v1.Notebook {
	if x != nil {
		return x.Notebook
	}
	return nil
}

func (x *TransformRequest) GetExtension() *TransformRequestExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type TransformRequestExtension struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AutoSave       *bool                  `protobuf:"varint,2,opt,name=auto_save,json=autoSave,proto3,oneof" json:"auto_save,omitempty"`
	Repository     *string                `protobuf:"bytes,3,opt,name=repository,proto3,oneof" json:"repository,omitempty"`
	Branch         *string                `protobuf:"bytes,4,opt,name=branch,proto3,oneof" json:"branch,omitempty"`
	Commit         *string                `protobuf:"bytes,5,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
	FilePath       *string                `protobuf:"bytes,6,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
	FileContent    []byte                 `protobuf:"bytes,7,opt,name=file_content,json=fileContent,proto3,oneof" json:"file_content,omitempty"`
	PlainOutput    []byte                 `protobuf:"bytes,8,opt,name=plain_output,json=plainOutput,proto3,oneof" json:"plain_output,omitempty"`
	MaskedOutput   []byte                 `protobuf:"bytes,9,opt,name=masked_output,json=maskedOutput,proto3,oneof" json:"masked_output,omitempty"`
	MacAddress     *string                `protobuf:"bytes,10,opt,name=mac_address,json=macAddress,proto3,oneof" json:"mac_address,omitempty"`
	Hostname       *string                `protobuf:"bytes,11,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	Platform       *string                `protobuf:"bytes,12,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	Release        *string                `protobuf:"bytes,13,opt,name=release,proto3,oneof" json:"release,omitempty"`
	Arch           *string                `protobuf:"bytes,14,opt,name=arch,proto3,oneof" json:"arch,omitempty"`
	Vendor         *string                `protobuf:"bytes,15,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	Shell          *string                `protobuf:"bytes,16,opt,name=shell,proto3,oneof" json:"shell,omitempty"`
	VsAppHost      *string                `protobuf:"bytes,17,opt,name=vs_app_host,json=vsAppHost,proto3,oneof" json:"vs_app_host,omitempty"`
	VsAppName      *string                `protobuf:"bytes,18,opt,name=vs_app_name,json=vsAppName,proto3,oneof" json:"vs_app_name,omitempty"`
	VsAppSessionId *string                `protobuf:"bytes,19,opt,name=vs_app_session_id,json=vsAppSessionId,proto3,oneof" json:"vs_app_session_id,omitempty"`
	VsMachineId    *string                `protobuf:"bytes,20,opt,name=vs_machine_id,json=vsMachineId,proto3,oneof" json:"vs_machine_id,omitempty"`
	VsMetadata     map[string]string      `protobuf:"bytes,21,rep,name=vs_metadata,json=vsMetadata,proto3" json:"vs_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TransformRequestExtension) Reset() {
	*x = TransformRequestExtension{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformRequestExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformRequestExtension) ProtoMessage() {}

func (x *TransformRequestExtension) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformRequestExtension.ProtoReflect.Descriptor instead.
func (*TransformRequestExtension) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{1}
}

func (x *TransformRequestExtension) GetAutoSave() bool {
	if x != nil && x.AutoSave != nil {
		return *x.AutoSave
	}
	return false
}

func (x *TransformRequestExtension) GetRepository() string {
	if x != nil && x.Repository != nil {
		return *x.Repository
	}
	return ""
}

func (x *TransformRequestExtension) GetBranch() string {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return ""
}

func (x *TransformRequestExtension) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

func (x *TransformRequestExtension) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

func (x *TransformRequestExtension) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

func (x *TransformRequestExtension) GetPlainOutput() []byte {
	if x != nil {
		return x.PlainOutput
	}
	return nil
}

func (x *TransformRequestExtension) GetMaskedOutput() []byte {
	if x != nil {
		return x.MaskedOutput
	}
	return nil
}

func (x *TransformRequestExtension) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *TransformRequestExtension) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *TransformRequestExtension) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *TransformRequestExtension) GetRelease() string {
	if x != nil && x.Release != nil {
		return *x.Release
	}
	return ""
}

func (x *TransformRequestExtension) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *TransformRequestExtension) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *TransformRequestExtension) GetShell() string {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return ""
}

func (x *TransformRequestExtension) GetVsAppHost() string {
	if x != nil && x.VsAppHost != nil {
		return *x.VsAppHost
	}
	return ""
}

func (x *TransformRequestExtension) GetVsAppName() string {
	if x != nil && x.VsAppName != nil {
		return *x.VsAppName
	}
	return ""
}

func (x *TransformRequestExtension) GetVsAppSessionId() string {
	if x != nil && x.VsAppSessionId != nil {
		return *x.VsAppSessionId
	}
	return ""
}

func (x *TransformRequestExtension) GetVsMachineId() string {
	if x != nil && x.VsMachineId != nil {
		return *x.VsMachineId
	}
	return ""
}

func (x *TransformRequestExtension) GetVsMetadata() map[string]string {
	if x != nil {
		return x.VsMetadata
	}
	return nil
}

type TransformResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notebook      *v1.Notebook           `protobuf:"bytes,1,opt,name=notebook,proto3" json:"notebook,omitempty"`
	Extension     *ReporterExtension     `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransformResponse) Reset() {
	*x = TransformResponse{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformResponse) ProtoMessage() {}

func (x *TransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformResponse.ProtoReflect.Descriptor instead.
func (*TransformResponse) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{2}
}

func (x *TransformResponse) GetNotebook() *v1.Notebook {
	if x != nil {
		return x.Notebook
	}
	return nil
}

func (x *TransformResponse) GetExtension() *ReporterExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type ReporterExtension struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AutoSave      bool                   `protobuf:"varint,1,opt,name=auto_save,json=autoSave,proto3" json:"auto_save,omitempty"`
	Git           *ReporterGit           `protobuf:"bytes,2,opt,name=git,proto3" json:"git,omitempty"`
	File          *ReporterFile          `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	Session       *ReporterSession       `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	Device        *ReporterDevice        `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterExtension) Reset() {
	*x = ReporterExtension{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterExtension) ProtoMessage() {}

func (x *ReporterExtension) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterExtension.ProtoReflect.Descriptor instead.
func (*ReporterExtension) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{3}
}

func (x *ReporterExtension) GetAutoSave() bool {
	if x != nil {
		return x.AutoSave
	}
	return false
}

func (x *ReporterExtension) GetGit() *ReporterGit {
	if x != nil {
		return x.Git
	}
	return nil
}

func (x *ReporterExtension) GetFile() *ReporterFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ReporterExtension) GetSession() *ReporterSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ReporterExtension) GetDevice() *ReporterDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type ReporterGit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    string                 `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch        string                 `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit        string                 `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterGit) Reset() {
	*x = ReporterGit{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterGit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterGit) ProtoMessage() {}

func (x *ReporterGit) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterGit.ProtoReflect.Descriptor instead.
func (*ReporterGit) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{4}
}

func (x *ReporterGit) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ReporterGit) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ReporterGit) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type ReporterSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlainOutput   []byte                 `protobuf:"bytes,1,opt,name=plain_output,json=plainOutput,proto3" json:"plain_output,omitempty"`
	MaskedOutput  []byte                 `protobuf:"bytes,2,opt,name=masked_output,json=maskedOutput,proto3" json:"masked_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterSession) Reset() {
	*x = ReporterSession{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterSession) ProtoMessage() {}

func (x *ReporterSession) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterSession.ProtoReflect.Descriptor instead.
func (*ReporterSession) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{5}
}

func (x *ReporterSession) GetPlainOutput() []byte {
	if x != nil {
		return x.PlainOutput
	}
	return nil
}

func (x *ReporterSession) GetMaskedOutput() []byte {
	if x != nil {
		return x.MaskedOutput
	}
	return nil
}

type ReporterFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReporterFile) Reset() {
	*x = ReporterFile{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterFile) ProtoMessage() {}

func (x *ReporterFile) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterFile.ProtoReflect.Descriptor instead.
func (*ReporterFile) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{6}
}

func (x *ReporterFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReporterFile) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ReporterDevice struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MacAddress     string                 `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Hostname       string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Platform       string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Release        string                 `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	Arch           string                 `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Vendor         string                 `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Shell          string                 `protobuf:"bytes,7,opt,name=shell,proto3" json:"shell,omitempty"`
	VsAppHost      string                 `protobuf:"bytes,8,opt,name=vs_app_host,json=vsAppHost,proto3" json:"vs_app_host,omitempty"`
	VsAppName      string                 `protobuf:"bytes,9,opt,name=vs_app_name,json=vsAppName,proto3" json:"vs_app_name,omitempty"`
	VsAppSessionId string                 `protobuf:"bytes,10,opt,name=vs_app_session_id,json=vsAppSessionId,proto3" json:"vs_app_session_id,omitempty"`
	VsMachineId    string                 `protobuf:"bytes,11,opt,name=vs_machine_id,json=vsMachineId,proto3" json:"vs_machine_id,omitempty"`
	VsMetadata     map[string]string      `protobuf:"bytes,12,rep,name=vs_metadata,json=vsMetadata,proto3" json:"vs_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReporterDevice) Reset() {
	*x = ReporterDevice{}
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReporterDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReporterDevice) ProtoMessage() {}

func (x *ReporterDevice) ProtoReflect() protoreflect.Message {
	mi := &file_runme_reporter_v1alpha1_reporter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReporterDevice.ProtoReflect.Descriptor instead.
func (*ReporterDevice) Descriptor() ([]byte, []int) {
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP(), []int{7}
}

func (x *ReporterDevice) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ReporterDevice) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ReporterDevice) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ReporterDevice) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *ReporterDevice) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *ReporterDevice) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *ReporterDevice) GetShell() string {
	if x != nil {
		return x.Shell
	}
	return ""
}

func (x *ReporterDevice) GetVsAppHost() string {
	if x != nil {
		return x.VsAppHost
	}
	return ""
}

func (x *ReporterDevice) GetVsAppName() string {
	if x != nil {
		return x.VsAppName
	}
	return ""
}

func (x *ReporterDevice) GetVsAppSessionId() string {
	if x != nil {
		return x.VsAppSessionId
	}
	return ""
}

func (x *ReporterDevice) GetVsMachineId() string {
	if x != nil {
		return x.VsMachineId
	}
	return ""
}

func (x *ReporterDevice) GetVsMetadata() map[string]string {
	if x != nil {
		return x.VsMetadata
	}
	return nil
}

var File_runme_reporter_v1alpha1_reporter_proto protoreflect.FileDescriptor

var file_runme_reporter_v1alpha1_reporter_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1c, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9b, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x50, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x08,
	0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x04, 0x61, 0x72, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x76, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x09, 0x76, 0x73, 0x41, 0x70, 0x70, 0x48, 0x6f,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x76, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x76, 0x73,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x76, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0e, 0x76, 0x73, 0x41, 0x70, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x76, 0x73,
	0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x0b, 0x76, 0x73, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0b, 0x76, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x56, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x73, 0x61, 0x76, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x73, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x08, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x48, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xa8, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x61,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x61,
	0x76, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x47, 0x69, 0x74, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x75, 0x6e, 0x6d,
	0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x47, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x0f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x73, 0x41, 0x70, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x73, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x76, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x73, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x73,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x76, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x56, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x32, 0x75, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x29, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5c, 0x5a, 0x5a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x2f, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x72,
	0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_runme_reporter_v1alpha1_reporter_proto_rawDescOnce sync.Once
	file_runme_reporter_v1alpha1_reporter_proto_rawDescData []byte
)

func file_runme_reporter_v1alpha1_reporter_proto_rawDescGZIP() []byte {
	file_runme_reporter_v1alpha1_reporter_proto_rawDescOnce.Do(func() {
		file_runme_reporter_v1alpha1_reporter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runme_reporter_v1alpha1_reporter_proto_rawDesc), len(file_runme_reporter_v1alpha1_reporter_proto_rawDesc)))
	})
	return file_runme_reporter_v1alpha1_reporter_proto_rawDescData
}

var file_runme_reporter_v1alpha1_reporter_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_runme_reporter_v1alpha1_reporter_proto_goTypes = []any{
	(*TransformRequest)(nil),          // 0: runme.reporter.v1alpha1.TransformRequest
	(*TransformRequestExtension)(nil), // 1: runme.reporter.v1alpha1.TransformRequestExtension
	(*TransformResponse)(nil),         // 2: runme.reporter.v1alpha1.TransformResponse
	(*ReporterExtension)(nil),         // 3: runme.reporter.v1alpha1.ReporterExtension
	(*ReporterGit)(nil),               // 4: runme.reporter.v1alpha1.ReporterGit
	(*ReporterSession)(nil),           // 5: runme.reporter.v1alpha1.ReporterSession
	(*ReporterFile)(nil),              // 6: runme.reporter.v1alpha1.ReporterFile
	(*ReporterDevice)(nil),            // 7: runme.reporter.v1alpha1.ReporterDevice
	nil,                               // 8: runme.reporter.v1alpha1.TransformRequestExtension.VsMetadataEntry
	nil,                               // 9: runme.reporter.v1alpha1.ReporterDevice.VsMetadataEntry
	(*v1.Notebook)(nil),               // 10: runme.parser.v1.Notebook
}
var file_runme_reporter_v1alpha1_reporter_proto_depIdxs = []int32{
	10, // 0: runme.reporter.v1alpha1.TransformRequest.notebook:type_name -> runme.parser.v1.Notebook
	1,  // 1: runme.reporter.v1alpha1.TransformRequest.extension:type_name -> runme.reporter.v1alpha1.TransformRequestExtension
	8,  // 2: runme.reporter.v1alpha1.TransformRequestExtension.vs_metadata:type_name -> runme.reporter.v1alpha1.TransformRequestExtension.VsMetadataEntry
	10, // 3: runme.reporter.v1alpha1.TransformResponse.notebook:type_name -> runme.parser.v1.Notebook
	3,  // 4: runme.reporter.v1alpha1.TransformResponse.extension:type_name -> runme.reporter.v1alpha1.ReporterExtension
	4,  // 5: runme.reporter.v1alpha1.ReporterExtension.git:type_name -> runme.reporter.v1alpha1.ReporterGit
	6,  // 6: runme.reporter.v1alpha1.ReporterExtension.file:type_name -> runme.reporter.v1alpha1.ReporterFile
	5,  // 7: runme.reporter.v1alpha1.ReporterExtension.session:type_name -> runme.reporter.v1alpha1.ReporterSession
	7,  // 8: runme.reporter.v1alpha1.ReporterExtension.device:type_name -> runme.reporter.v1alpha1.ReporterDevice
	9,  // 9: runme.reporter.v1alpha1.ReporterDevice.vs_metadata:type_name -> runme.reporter.v1alpha1.ReporterDevice.VsMetadataEntry
	0,  // 10: runme.reporter.v1alpha1.ReporterService.Transform:input_type -> runme.reporter.v1alpha1.TransformRequest
	2,  // 11: runme.reporter.v1alpha1.ReporterService.Transform:output_type -> runme.reporter.v1alpha1.TransformResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_runme_reporter_v1alpha1_reporter_proto_init() }
func file_runme_reporter_v1alpha1_reporter_proto_init() {
	if File_runme_reporter_v1alpha1_reporter_proto != nil {
		return
	}
	file_runme_reporter_v1alpha1_reporter_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runme_reporter_v1alpha1_reporter_proto_rawDesc), len(file_runme_reporter_v1alpha1_reporter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runme_reporter_v1alpha1_reporter_proto_goTypes,
		DependencyIndexes: file_runme_reporter_v1alpha1_reporter_proto_depIdxs,
		MessageInfos:      file_runme_reporter_v1alpha1_reporter_proto_msgTypes,
	}.Build()
	File_runme_reporter_v1alpha1_reporter_proto = out.File
	file_runme_reporter_v1alpha1_reporter_proto_goTypes = nil
	file_runme_reporter_v1alpha1_reporter_proto_depIdxs = nil
}
